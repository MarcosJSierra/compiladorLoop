/* The following code was generated by JFlex 1.7.0 */

package kurokitsune.main;
import java_cup.runtime.Symbol;
import informacion.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/main/java/tools/reglasLoop.jflex</tt>
 */
class AnalizadorLexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int estado1 = 2;
  public static final int estado2 = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\2\1\67\1\70\1\1\22\0\1\3\1\54\1\21\2\0"+
    "\1\63\1\0\1\24\1\61\1\62\1\25\1\57\1\64\1\60\1\6"+
    "\1\23\1\4\11\5\1\56\1\55\1\52\1\53\1\52\2\0\1\34"+
    "\1\37\1\22\1\41\1\35\10\22\1\40\1\42\1\50\1\22\1\36"+
    "\10\22\1\65\1\0\1\66\3\0\1\13\1\30\1\31\1\12\1\10"+
    "\1\15\1\43\1\46\1\33\2\22\1\16\1\44\1\26\1\14\1\47"+
    "\1\22\1\11\1\17\1\27\1\32\1\7\1\22\1\51\1\22\1\45"+
    "\1\0\1\20\10\0\1\67\u1fa2\0\1\67\1\67\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\0\1\3\2\4\1\5\2\6\1\7"+
    "\10\1\1\3\1\10\1\11\13\1\1\12\1\13\1\3"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\2\30\1\5\2\31\1\32"+
    "\10\2\1\27\1\33\1\34\13\2\1\35\1\36\1\27"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\0\14\1\1\53\1\0"+
    "\1\54\1\55\1\0\10\1\1\56\6\1\2\14\1\57"+
    "\1\60\1\0\14\2\1\61\1\0\1\62\10\2\1\63"+
    "\6\2\2\37\1\0\2\64\16\1\1\55\1\0\11\1"+
    "\1\65\7\1\1\0\2\66\27\2\1\67\7\2\1\52"+
    "\6\1\1\64\1\70\3\1\1\71\1\1\1\72\1\73"+
    "\1\55\1\74\20\1\1\60\6\2\1\66\1\75\3\2"+
    "\1\76\1\2\1\77\1\100\1\101\20\2\1\0\7\1"+
    "\1\102\1\103\6\1\1\104\4\1\1\105\5\1\1\0"+
    "\7\2\1\106\1\107\6\2\1\110\4\2\1\111\5\2"+
    "\3\1\1\6\6\1\1\112\1\113\12\1\3\2\1\31"+
    "\6\2\1\114\1\115\12\2\14\1\1\116\1\117\10\1"+
    "\14\2\1\120\1\121\10\2\1\1\1\122\1\123\1\124"+
    "\1\125\1\126\1\1\1\127\1\130\5\1\1\131\2\1"+
    "\1\132\1\133\1\134\1\135\1\1\1\2\1\136\1\137"+
    "\1\140\1\141\1\142\1\2\1\143\1\144\5\2\1\145"+
    "\2\2\1\146\1\147\1\150\1\151\1\2\1\152\1\153"+
    "\10\1\1\154\1\155\1\156\10\2\1\157\4\1\1\160"+
    "\1\161\1\162\1\1\4\2\1\163\1\164\1\165\1\2"+
    "\1\1\1\166\1\1\1\167\1\170\1\2\1\171\1\2"+
    "\1\172\1\173\2\1\2\2\1\174\1\1\1\175\1\2"+
    "\1\176\1\177";

  private static int [] zzUnpackAction() {
    int [] result = new int[541];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\253\0\u011d\0\u0156"+
    "\0\u018f\0\253\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5"+
    "\0\u031e\0\u0357\0\u0390\0\u03c9\0\253\0\u0402\0\u043b\0\u0474"+
    "\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c"+
    "\0\253\0\u0675\0\u0675\0\u06ae\0\253\0\253\0\253\0\253"+
    "\0\253\0\253\0\253\0\253\0\253\0\253\0\253\0\u06e7"+
    "\0\253\0\u0720\0\u0759\0\u0792\0\253\0\u07cb\0\u0804\0\u083d"+
    "\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993\0\u03c9\0\253"+
    "\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b"+
    "\0\u0b94\0\u0bcd\0\u0c06\0\253\0\u0c3f\0\u0c3f\0\u0c78\0\253"+
    "\0\253\0\253\0\253\0\253\0\253\0\253\0\253\0\253"+
    "\0\253\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07"+
    "\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf"+
    "\0\u0390\0\253\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125"+
    "\0\u115e\0\u1197\0\u11d0\0\u1209\0\u02ac\0\u1242\0\u127b\0\u12b4"+
    "\0\u12ed\0\u1326\0\u135f\0\u1398\0\253\0\253\0\u13d1\0\u140a"+
    "\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2"+
    "\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u0993\0\253\0\u1728"+
    "\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u08af"+
    "\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\253"+
    "\0\u1a7f\0\253\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5"+
    "\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d"+
    "\0\u1dd6\0\253\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c"+
    "\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u02ac\0\u2049\0\u2082\0\u20bb"+
    "\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8\0\253\0\u2211\0\u224a"+
    "\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9\0\u2412"+
    "\0\u244b\0\u2484\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u25a1\0\u25da"+
    "\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7\0\u2730\0\u08af\0\u2769"+
    "\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf\0\u28f8\0\u2931"+
    "\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u02ac\0\u02ac\0\u2a87"+
    "\0\u2ac0\0\u2af9\0\u02ac\0\u2b32\0\u02ac\0\u02ac\0\u2b6b\0\u02ac"+
    "\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33"+
    "\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u2e89\0\u2ec2\0\u2efb"+
    "\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051\0\u308a\0\u08af"+
    "\0\u08af\0\u30c3\0\u30fc\0\u3135\0\u08af\0\u316e\0\u08af\0\u08af"+
    "\0\u08af\0\u31a7\0\u31e0\0\u3219\0\u3252\0\u328b\0\u32c4\0\u32fd"+
    "\0\u3336\0\u336f\0\u33a8\0\u33e1\0\u341a\0\u3453\0\u348c\0\u34c5"+
    "\0\u34fe\0\u28f8\0\u3537\0\u3570\0\u35a9\0\u35e2\0\u361b\0\u3654"+
    "\0\u368d\0\u02ac\0\u02ac\0\u36c6\0\u36ff\0\u3738\0\u3771\0\u37aa"+
    "\0\u37e3\0\u02ac\0\u381c\0\u3855\0\u388e\0\u38c7\0\u02ac\0\u3900"+
    "\0\u3939\0\u3972\0\u39ab\0\u39e4\0\u2f34\0\u3a1d\0\u3a56\0\u3a8f"+
    "\0\u3ac8\0\u3b01\0\u3b3a\0\u3b73\0\u08af\0\u08af\0\u3bac\0\u3be5"+
    "\0\u3c1e\0\u3c57\0\u3c90\0\u3cc9\0\u08af\0\u3d02\0\u3d3b\0\u3d74"+
    "\0\u3dad\0\u08af\0\u3de6\0\u3e1f\0\u3e58\0\u3e91\0\u3eca\0\u3f03"+
    "\0\u3f3c\0\u3f75\0\u02ac\0\u3fae\0\u3fe7\0\u4020\0\u4059\0\u4092"+
    "\0\u40cb\0\u4104\0\u02ac\0\u413d\0\u4176\0\u41af\0\u41e8\0\u4221"+
    "\0\u425a\0\u4293\0\u42cc\0\u4305\0\u433e\0\u4377\0\u43b0\0\u43e9"+
    "\0\u08af\0\u4422\0\u445b\0\u4494\0\u44cd\0\u4506\0\u453f\0\u4578"+
    "\0\u08af\0\u45b1\0\u45ea\0\u4623\0\u465c\0\u4695\0\u46ce\0\u4707"+
    "\0\u4740\0\u4779\0\u47b2\0\u47eb\0\u4824\0\u485d\0\u4896\0\u48cf"+
    "\0\u4908\0\u4941\0\u497a\0\u49b3\0\u49ec\0\u4a25\0\u4a5e\0\u02ac"+
    "\0\u02ac\0\u4a97\0\u4ad0\0\u4b09\0\u4b42\0\u4b7b\0\u4bb4\0\u4bed"+
    "\0\u4c26\0\u4c5f\0\u4c98\0\u4cd1\0\u4d0a\0\u4d43\0\u4d7c\0\u4db5"+
    "\0\u4dee\0\u4e27\0\u4e60\0\u4e99\0\u4ed2\0\u08af\0\u08af\0\u4f0b"+
    "\0\u4f44\0\u4f7d\0\u4fb6\0\u4fef\0\u5028\0\u5061\0\u509a\0\u50d3"+
    "\0\u02ac\0\u02ac\0\u02ac\0\u02ac\0\u02ac\0\u510c\0\u02ac\0\u02ac"+
    "\0\u5145\0\u517e\0\u51b7\0\u51f0\0\u5229\0\u02ac\0\u5262\0\u529b"+
    "\0\u02ac\0\u02ac\0\u02ac\0\u02ac\0\u52d4\0\u530d\0\u08af\0\u08af"+
    "\0\u08af\0\u08af\0\u08af\0\u5346\0\u08af\0\u08af\0\u537f\0\u53b8"+
    "\0\u53f1\0\u542a\0\u5463\0\u08af\0\u549c\0\u54d5\0\u08af\0\u08af"+
    "\0\u08af\0\u08af\0\u550e\0\u02ac\0\u02ac\0\u5547\0\u5580\0\u55b9"+
    "\0\u55f2\0\u562b\0\u5664\0\u569d\0\u56d6\0\u02ac\0\u08af\0\u08af"+
    "\0\u570f\0\u5748\0\u5781\0\u57ba\0\u57f3\0\u582c\0\u5865\0\u589e"+
    "\0\u08af\0\u58d7\0\u5910\0\u5949\0\u5982\0\u02ac\0\u02ac\0\u02ac"+
    "\0\u59bb\0\u59f4\0\u5a2d\0\u5a66\0\u5a9f\0\u08af\0\u08af\0\u08af"+
    "\0\u5ad8\0\u5b11\0\u02ac\0\u5b4a\0\u02ac\0\u02ac\0\u5b83\0\u08af"+
    "\0\u5bbc\0\u08af\0\u08af\0\u5bf5\0\u5c2e\0\u5c67\0\u5ca0\0\u02ac"+
    "\0\u5cd9\0\u08af\0\u5d12\0\u02ac\0\u08af";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[541];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\2\17\1\20\1\21\1\22\1\4"+
    "\1\23\1\17\1\24\1\4\1\25\1\26\1\27\1\30"+
    "\1\31\1\17\1\32\1\33\5\17\1\34\1\17\1\35"+
    "\1\17\1\36\1\37\1\40\1\17\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\2\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\2\72\1\73"+
    "\1\74\1\75\1\57\1\76\1\72\1\77\1\57\1\100"+
    "\1\101\1\102\1\103\1\104\1\72\1\105\1\106\5\72"+
    "\1\107\1\72\1\110\1\72\1\111\1\112\1\113\1\72"+
    "\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\123"+
    "\1\124\1\125\1\126\1\127\1\130\73\56\73\0\1\6"+
    "\67\0\2\131\1\132\14\0\1\131\54\0\2\17\1\133"+
    "\11\17\2\0\1\17\3\0\24\17\23\0\1\17\1\11"+
    "\1\133\11\17\2\0\1\17\3\0\24\17\23\0\2\17"+
    "\1\0\1\17\1\134\7\17\2\0\1\17\3\0\24\17"+
    "\23\0\2\17\1\0\7\17\1\135\1\136\2\0\1\17"+
    "\3\0\1\137\22\17\1\140\23\0\2\17\1\0\1\17"+
    "\1\141\2\17\1\142\4\17\2\0\1\17\3\0\24\17"+
    "\23\0\2\17\1\0\1\17\1\143\7\17\2\0\1\17"+
    "\3\0\24\17\23\0\2\17\1\0\11\17\2\0\1\17"+
    "\3\0\24\17\23\0\2\17\1\0\4\17\1\144\4\17"+
    "\2\0\1\17\3\0\24\17\23\0\2\17\1\0\1\17"+
    "\1\145\3\17\1\146\3\17\2\0\1\17\3\0\24\17"+
    "\23\0\2\17\1\0\1\17\1\147\7\17\2\0\1\17"+
    "\3\0\5\17\1\150\16\17\22\0\16\151\1\152\2\151"+
    "\2\0\24\151\42\0\1\153\1\0\1\154\47\0\2\17"+
    "\1\0\11\17\2\0\1\17\3\0\4\17\1\155\17\17"+
    "\23\0\2\17\1\0\4\17\1\156\4\17\2\0\1\17"+
    "\3\0\24\17\23\0\2\17\1\0\5\17\1\157\3\17"+
    "\2\0\1\17\3\0\24\17\23\0\2\17\1\0\4\17"+
    "\1\160\1\161\1\17\1\162\1\17\2\0\1\17\3\0"+
    "\24\17\23\0\2\17\1\0\11\17\2\0\1\17\3\0"+
    "\1\163\23\17\23\0\2\17\1\0\11\17\2\0\1\17"+
    "\3\0\12\17\1\164\11\17\23\0\2\17\1\0\11\17"+
    "\2\0\1\17\3\0\10\17\1\165\13\17\23\0\2\17"+
    "\1\0\1\17\1\166\7\17\2\0\1\17\3\0\5\17"+
    "\1\167\16\17\23\0\2\17\1\0\4\17\1\170\4\17"+
    "\2\0\1\17\3\0\24\17\23\0\2\17\1\0\2\17"+
    "\1\171\6\17\2\0\1\17\3\0\4\17\1\172\17\17"+
    "\23\0\2\17\1\0\2\17\1\173\6\17\2\0\1\17"+
    "\3\0\24\17\72\0\1\41\16\0\1\174\1\175\70\0"+
    "\1\61\67\0\2\176\1\177\14\0\1\176\54\0\2\72"+
    "\1\200\11\72\2\0\1\72\3\0\24\72\23\0\1\72"+
    "\1\64\1\200\11\72\2\0\1\72\3\0\24\72\23\0"+
    "\2\72\1\0\1\72\1\201\7\72\2\0\1\72\3\0"+
    "\24\72\23\0\2\72\1\0\7\72\1\202\1\203\2\0"+
    "\1\72\3\0\1\204\22\72\1\205\23\0\2\72\1\0"+
    "\1\72\1\206\2\72\1\207\4\72\2\0\1\72\3\0"+
    "\24\72\23\0\2\72\1\0\1\72\1\210\7\72\2\0"+
    "\1\72\3\0\24\72\23\0\2\72\1\0\11\72\2\0"+
    "\1\72\3\0\24\72\23\0\2\72\1\0\4\72\1\211"+
    "\4\72\2\0\1\72\3\0\24\72\23\0\2\72\1\0"+
    "\1\72\1\212\3\72\1\213\3\72\2\0\1\72\3\0"+
    "\24\72\23\0\2\72\1\0\1\72\1\214\7\72\2\0"+
    "\1\72\3\0\5\72\1\215\16\72\22\0\16\216\1\217"+
    "\2\216\2\0\24\216\23\0\2\72\1\0\11\72\2\0"+
    "\1\72\3\0\4\72\1\220\17\72\23\0\2\72\1\0"+
    "\4\72\1\221\4\72\2\0\1\72\3\0\24\72\23\0"+
    "\2\72\1\0\5\72\1\222\3\72\2\0\1\72\3\0"+
    "\24\72\23\0\2\72\1\0\4\72\1\223\1\224\1\72"+
    "\1\225\1\72\2\0\1\72\3\0\24\72\23\0\2\72"+
    "\1\0\11\72\2\0\1\72\3\0\1\226\23\72\23\0"+
    "\2\72\1\0\11\72\2\0\1\72\3\0\12\72\1\227"+
    "\11\72\23\0\2\72\1\0\11\72\2\0\1\72\3\0"+
    "\10\72\1\230\13\72\23\0\2\72\1\0\1\72\1\231"+
    "\7\72\2\0\1\72\3\0\5\72\1\232\16\72\23\0"+
    "\2\72\1\0\4\72\1\233\4\72\2\0\1\72\3\0"+
    "\24\72\23\0\2\72\1\0\2\72\1\234\6\72\2\0"+
    "\1\72\3\0\4\72\1\235\17\72\23\0\2\72\1\0"+
    "\2\72\1\236\6\72\2\0\1\72\3\0\24\72\72\0"+
    "\1\114\16\0\1\237\1\240\67\0\2\131\1\241\14\0"+
    "\1\131\54\0\1\242\1\243\67\0\2\17\1\0\2\17"+
    "\1\244\6\17\2\0\1\17\3\0\24\17\23\0\2\17"+
    "\1\0\11\17\2\0\1\17\3\0\5\17\1\245\16\17"+
    "\23\0\2\17\1\0\11\17\2\0\1\17\3\0\3\17"+
    "\1\246\20\17\23\0\2\17\1\0\11\17\2\0\1\17"+
    "\3\0\1\17\1\247\22\17\23\0\2\17\1\0\11\17"+
    "\2\0\1\17\3\0\1\17\1\250\22\17\23\0\2\17"+
    "\1\0\4\17\1\251\4\17\2\0\1\17\3\0\24\17"+
    "\23\0\2\17\1\0\11\17\2\0\1\17\3\0\5\17"+
    "\1\252\16\17\23\0\2\17\1\0\1\253\7\17\1\254"+
    "\2\0\1\17\3\0\24\17\23\0\2\17\1\0\7\17"+
    "\1\255\1\17\2\0\1\17\3\0\24\17\23\0\2\17"+
    "\1\0\1\17\1\256\7\17\2\0\1\17\3\0\24\17"+
    "\23\0\2\17\1\0\11\17\2\0\1\17\3\0\15\17"+
    "\1\257\6\17\23\0\2\17\1\0\11\17\2\0\1\17"+
    "\3\0\1\260\23\17\23\0\2\17\1\0\11\17\2\0"+
    "\1\17\3\0\1\261\23\17\20\0\2\262\16\153\1\0"+
    "\3\153\1\0\24\153\12\0\1\153\3\0\1\153\1\0"+
    "\20\154\1\0\3\154\1\263\24\154\12\0\1\154\3\0"+
    "\1\154\4\0\2\17\1\0\7\17\1\264\1\17\2\0"+
    "\1\17\3\0\24\17\23\0\2\17\1\0\11\17\2\0"+
    "\1\17\3\0\1\265\23\17\23\0\2\17\1\0\5\17"+
    "\1\266\3\17\2\0\1\17\3\0\24\17\23\0\2\17"+
    "\1\0\3\17\1\267\5\17\2\0\1\17\3\0\24\17"+
    "\23\0\2\17\1\0\10\17\1\270\2\0\1\17\3\0"+
    "\1\271\23\17\23\0\2\17\1\0\4\17\1\272\4\17"+
    "\2\0\1\17\3\0\24\17\23\0\2\17\1\0\10\17"+
    "\1\273\2\0\1\17\3\0\3\17\1\274\20\17\23\0"+
    "\2\17\1\0\11\17\2\0\1\17\3\0\13\17\1\275"+
    "\10\17\23\0\2\17\1\0\11\17\2\0\1\17\3\0"+
    "\1\17\1\276\22\17\23\0\2\17\1\0\1\17\1\277"+
    "\7\17\2\0\1\17\3\0\24\17\23\0\2\17\1\0"+
    "\11\17\2\0\1\17\3\0\3\17\1\300\20\17\23\0"+
    "\2\17\1\0\5\17\1\301\3\17\2\0\1\17\3\0"+
    "\5\17\1\302\16\17\23\0\2\17\1\0\11\17\2\0"+
    "\1\17\3\0\2\17\1\303\21\17\23\0\2\17\1\0"+
    "\11\17\2\0\1\17\3\0\5\17\1\304\16\17\21\0"+
    "\1\175\67\0\2\176\1\305\14\0\1\176\54\0\1\306"+
    "\1\307\67\0\2\72\1\0\2\72\1\310\6\72\2\0"+
    "\1\72\3\0\24\72\23\0\2\72\1\0\11\72\2\0"+
    "\1\72\3\0\5\72\1\311\16\72\23\0\2\72\1\0"+
    "\11\72\2\0\1\72\3\0\3\72\1\312\20\72\23\0"+
    "\2\72\1\0\11\72\2\0\1\72\3\0\1\72\1\313"+
    "\22\72\23\0\2\72\1\0\11\72\2\0\1\72\3\0"+
    "\1\72\1\314\22\72\23\0\2\72\1\0\4\72\1\315"+
    "\4\72\2\0\1\72\3\0\24\72\23\0\2\72\1\0"+
    "\11\72\2\0\1\72\3\0\5\72\1\316\16\72\23\0"+
    "\2\72\1\0\1\317\7\72\1\320\2\0\1\72\3\0"+
    "\24\72\23\0\2\72\1\0\7\72\1\321\1\72\2\0"+
    "\1\72\3\0\24\72\23\0\2\72\1\0\1\72\1\322"+
    "\7\72\2\0\1\72\3\0\24\72\23\0\2\72\1\0"+
    "\11\72\2\0\1\72\3\0\15\72\1\323\6\72\23\0"+
    "\2\72\1\0\11\72\2\0\1\72\3\0\1\324\23\72"+
    "\23\0\2\72\1\0\11\72\2\0\1\72\3\0\1\325"+
    "\23\72\23\0\2\72\1\0\7\72\1\326\1\72\2\0"+
    "\1\72\3\0\24\72\23\0\2\72\1\0\11\72\2\0"+
    "\1\72\3\0\1\327\23\72\23\0\2\72\1\0\5\72"+
    "\1\330\3\72\2\0\1\72\3\0\24\72\23\0\2\72"+
    "\1\0\3\72\1\331\5\72\2\0\1\72\3\0\24\72"+
    "\23\0\2\72\1\0\10\72\1\332\2\0\1\72\3\0"+
    "\1\333\23\72\23\0\2\72\1\0\4\72\1\334\4\72"+
    "\2\0\1\72\3\0\24\72\23\0\2\72\1\0\10\72"+
    "\1\335\2\0\1\72\3\0\3\72\1\336\20\72\23\0"+
    "\2\72\1\0\11\72\2\0\1\72\3\0\13\72\1\337"+
    "\10\72\23\0\2\72\1\0\11\72\2\0\1\72\3\0"+
    "\1\72\1\340\22\72\23\0\2\72\1\0\1\72\1\341"+
    "\7\72\2\0\1\72\3\0\24\72\23\0\2\72\1\0"+
    "\11\72\2\0\1\72\3\0\3\72\1\342\20\72\23\0"+
    "\2\72\1\0\5\72\1\343\3\72\2\0\1\72\3\0"+
    "\5\72\1\344\16\72\23\0\2\72\1\0\11\72\2\0"+
    "\1\72\3\0\2\72\1\345\21\72\23\0\2\72\1\0"+
    "\11\72\2\0\1\72\3\0\5\72\1\346\16\72\21\0"+
    "\1\240\67\0\2\131\1\347\14\0\1\131\55\0\1\243"+
    "\67\0\2\17\1\0\3\17\1\350\5\17\2\0\1\17"+
    "\3\0\24\17\23\0\2\17\1\0\11\17\2\0\1\17"+
    "\3\0\16\17\1\351\5\17\23\0\2\17\1\0\2\17"+
    "\1\352\6\17\2\0\1\17\3\0\24\17\23\0\2\17"+
    "\1\0\1\17\1\353\3\17\1\354\3\17\2\0\1\17"+
    "\3\0\24\17\23\0\2\17\1\0\11\17\2\0\1\17"+
    "\3\0\5\17\1\355\16\17\23\0\2\17\1\0\7\17"+
    "\1\356\1\17\2\0\1\17\3\0\24\17\23\0\2\17"+
    "\1\0\11\17\2\0\1\17\3\0\17\17\1\357\4\17"+
    "\23\0\2\17\1\0\5\17\1\360\3\17\2\0\1\17"+
    "\3\0\24\17\23\0\2\17\1\0\3\17\1\361\5\17"+
    "\2\0\1\17\3\0\24\17\23\0\2\17\1\0\10\17"+
    "\1\362\2\0\1\17\3\0\24\17\23\0\2\17\1\0"+
    "\2\17\1\363\6\17\2\0\1\17\3\0\24\17\23\0"+
    "\2\17\1\0\4\17\1\364\4\17\2\0\1\17\3\0"+
    "\24\17\23\0\2\17\1\0\5\17\1\365\3\17\2\0"+
    "\1\17\3\0\24\17\23\0\2\17\1\0\5\17\1\366"+
    "\3\17\2\0\1\17\3\0\24\17\42\0\1\367\51\0"+
    "\2\17\1\0\5\17\1\370\3\17\2\0\1\17\3\0"+
    "\24\17\23\0\2\17\1\0\11\17\2\0\1\17\3\0"+
    "\15\17\1\371\6\17\23\0\2\17\1\0\7\17\1\372"+
    "\1\17\2\0\1\17\3\0\24\17\23\0\2\17\1\0"+
    "\1\17\1\373\7\17\2\0\1\17\3\0\24\17\23\0"+
    "\2\17\1\0\1\17\1\374\7\17\2\0\1\17\3\0"+
    "\24\17\23\0\2\17\1\0\10\17\1\375\2\0\1\17"+
    "\3\0\24\17\23\0\2\17\1\0\10\17\1\376\2\0"+
    "\1\17\3\0\24\17\23\0\2\17\1\0\11\17\2\0"+
    "\1\17\3\0\1\17\1\377\22\17\23\0\2\17\1\0"+
    "\7\17\1\u0100\1\17\2\0\1\17\3\0\24\17\23\0"+
    "\2\17\1\0\5\17\1\u0101\3\17\2\0\1\17\3\0"+
    "\24\17\23\0\2\17\1\0\11\17\2\0\1\17\3\0"+
    "\1\u0102\23\17\23\0\2\17\1\0\1\17\1\u0103\7\17"+
    "\2\0\1\17\3\0\24\17\23\0\2\17\1\0\11\17"+
    "\2\0\1\17\3\0\1\17\1\u0104\17\17\1\u0105\2\17"+
    "\23\0\2\17\1\0\1\u0106\10\17\2\0\1\17\3\0"+
    "\24\17\23\0\2\17\1\0\7\17\1\u0107\1\17\2\0"+
    "\1\17\3\0\24\17\23\0\2\17\1\0\11\17\2\0"+
    "\1\17\3\0\1\u0108\23\17\20\0\2\176\1\u0109\14\0"+
    "\1\176\55\0\1\307\67\0\2\72\1\0\3\72\1\u010a"+
    "\5\72\2\0\1\72\3\0\24\72\23\0\2\72\1\0"+
    "\11\72\2\0\1\72\3\0\16\72\1\u010b\5\72\23\0"+
    "\2\72\1\0\2\72\1\u010c\6\72\2\0\1\72\3\0"+
    "\24\72\23\0\2\72\1\0\1\72\1\u010d\3\72\1\u010e"+
    "\3\72\2\0\1\72\3\0\24\72\23\0\2\72\1\0"+
    "\11\72\2\0\1\72\3\0\5\72\1\u010f\16\72\23\0"+
    "\2\72\1\0\7\72\1\u0110\1\72\2\0\1\72\3\0"+
    "\24\72\23\0\2\72\1\0\11\72\2\0\1\72\3\0"+
    "\17\72\1\u0111\4\72\23\0\2\72\1\0\5\72\1\u0112"+
    "\3\72\2\0\1\72\3\0\24\72\23\0\2\72\1\0"+
    "\3\72\1\u0113\5\72\2\0\1\72\3\0\24\72\23\0"+
    "\2\72\1\0\10\72\1\u0114\2\0\1\72\3\0\24\72"+
    "\23\0\2\72\1\0\2\72\1\u0115\6\72\2\0\1\72"+
    "\3\0\24\72\23\0\2\72\1\0\4\72\1\u0116\4\72"+
    "\2\0\1\72\3\0\24\72\23\0\2\72\1\0\5\72"+
    "\1\u0117\3\72\2\0\1\72\3\0\24\72\23\0\2\72"+
    "\1\0\5\72\1\u0118\3\72\2\0\1\72\3\0\24\72"+
    "\23\0\2\72\1\0\5\72\1\u0119\3\72\2\0\1\72"+
    "\3\0\24\72\23\0\2\72\1\0\11\72\2\0\1\72"+
    "\3\0\15\72\1\u011a\6\72\23\0\2\72\1\0\7\72"+
    "\1\u011b\1\72\2\0\1\72\3\0\24\72\23\0\2\72"+
    "\1\0\1\72\1\u011c\7\72\2\0\1\72\3\0\24\72"+
    "\23\0\2\72\1\0\1\72\1\u011d\7\72\2\0\1\72"+
    "\3\0\24\72\23\0\2\72\1\0\10\72\1\u011e\2\0"+
    "\1\72\3\0\24\72\23\0\2\72\1\0\10\72\1\u011f"+
    "\2\0\1\72\3\0\24\72\23\0\2\72\1\0\11\72"+
    "\2\0\1\72\3\0\1\72\1\u0120\22\72\23\0\2\72"+
    "\1\0\7\72\1\u0121\1\72\2\0\1\72\3\0\24\72"+
    "\23\0\2\72\1\0\5\72\1\u0122\3\72\2\0\1\72"+
    "\3\0\24\72\23\0\2\72\1\0\11\72\2\0\1\72"+
    "\3\0\1\u0123\23\72\23\0\2\72\1\0\1\72\1\u0124"+
    "\7\72\2\0\1\72\3\0\24\72\23\0\2\72\1\0"+
    "\11\72\2\0\1\72\3\0\1\72\1\u0125\17\72\1\u0126"+
    "\2\72\23\0\2\72\1\0\1\u0127\10\72\2\0\1\72"+
    "\3\0\24\72\23\0\2\72\1\0\7\72\1\u0128\1\72"+
    "\2\0\1\72\3\0\24\72\23\0\2\72\1\0\11\72"+
    "\2\0\1\72\3\0\1\u0129\23\72\20\0\2\131\1\u012a"+
    "\14\0\1\131\54\0\2\17\1\0\4\17\1\u012b\4\17"+
    "\2\0\1\17\3\0\24\17\23\0\2\17\1\0\11\17"+
    "\2\0\1\17\3\0\5\17\1\u012c\16\17\23\0\2\17"+
    "\1\0\11\17\2\0\1\17\3\0\5\17\1\u012d\16\17"+
    "\23\0\2\17\1\0\2\17\1\u012e\6\17\2\0\1\17"+
    "\3\0\24\17\23\0\2\17\1\0\11\17\2\0\1\17"+
    "\3\0\1\u012f\23\17\23\0\2\17\1\0\1\17\1\u0130"+
    "\7\17\2\0\1\17\3\0\24\17\23\0\2\17\1\0"+
    "\7\17\1\u0131\1\17\2\0\1\17\3\0\24\17\23\0"+
    "\2\17\1\0\1\17\1\u0132\7\17\2\0\1\17\3\0"+
    "\24\17\23\0\2\17\1\0\5\17\1\u0133\3\17\2\0"+
    "\1\17\3\0\24\17\23\0\2\17\1\0\2\17\1\u0134"+
    "\6\17\2\0\1\17\3\0\24\17\20\0\2\262\15\0"+
    "\1\262\54\0\2\17\1\0\1\17\1\u0135\7\17\2\0"+
    "\1\17\3\0\24\17\23\0\2\17\1\0\1\17\1\u0136"+
    "\7\17\2\0\1\17\3\0\24\17\23\0\2\17\1\0"+
    "\11\17\2\0\1\17\3\0\1\u0137\23\17\23\0\2\17"+
    "\1\0\11\17\2\0\1\17\3\0\1\u0138\23\17\23\0"+
    "\2\17\1\0\11\17\2\0\1\17\3\0\1\17\1\u0139"+
    "\22\17\23\0\2\17\1\0\1\17\1\u013a\7\17\2\0"+
    "\1\17\3\0\24\17\23\0\2\17\1\0\4\17\1\u013b"+
    "\4\17\2\0\1\17\3\0\24\17\23\0\2\17\1\0"+
    "\11\17\2\0\1\17\3\0\4\17\1\u013c\17\17\23\0"+
    "\2\17\1\0\3\17\1\u013d\5\17\2\0\1\17\3\0"+
    "\24\17\23\0\2\17\1\0\11\17\2\0\1\17\3\0"+
    "\1\17\1\u013e\22\17\23\0\2\17\1\0\2\17\1\u013f"+
    "\6\17\2\0\1\17\3\0\24\17\23\0\2\17\1\0"+
    "\1\17\1\u0140\7\17\2\0\1\17\3\0\24\17\23\0"+
    "\2\17\1\0\11\17\2\0\1\17\3\0\5\17\1\u0141"+
    "\16\17\23\0\2\17\1\0\4\17\1\u0142\4\17\2\0"+
    "\1\17\3\0\24\17\23\0\2\17\1\0\11\17\2\0"+
    "\1\17\3\0\5\17\1\u0143\16\17\23\0\2\17\1\0"+
    "\11\17\2\0\1\17\3\0\3\17\1\u0144\20\17\20\0"+
    "\2\176\1\u0145\14\0\1\176\54\0\2\72\1\0\4\72"+
    "\1\u0146\4\72\2\0\1\72\3\0\24\72\23\0\2\72"+
    "\1\0\11\72\2\0\1\72\3\0\5\72\1\u0147\16\72"+
    "\23\0\2\72\1\0\11\72\2\0\1\72\3\0\5\72"+
    "\1\u0148\16\72\23\0\2\72\1\0\2\72\1\u0149\6\72"+
    "\2\0\1\72\3\0\24\72\23\0\2\72\1\0\11\72"+
    "\2\0\1\72\3\0\1\u014a\23\72\23\0\2\72\1\0"+
    "\1\72\1\u014b\7\72\2\0\1\72\3\0\24\72\23\0"+
    "\2\72\1\0\7\72\1\u014c\1\72\2\0\1\72\3\0"+
    "\24\72\23\0\2\72\1\0\1\72\1\u014d\7\72\2\0"+
    "\1\72\3\0\24\72\23\0\2\72\1\0\5\72\1\u014e"+
    "\3\72\2\0\1\72\3\0\24\72\23\0\2\72\1\0"+
    "\2\72\1\u014f\6\72\2\0\1\72\3\0\24\72\23\0"+
    "\2\72\1\0\1\72\1\u0150\7\72\2\0\1\72\3\0"+
    "\24\72\23\0\2\72\1\0\1\72\1\u0151\7\72\2\0"+
    "\1\72\3\0\24\72\23\0\2\72\1\0\11\72\2\0"+
    "\1\72\3\0\1\u0152\23\72\23\0\2\72\1\0\11\72"+
    "\2\0\1\72\3\0\1\u0153\23\72\23\0\2\72\1\0"+
    "\11\72\2\0\1\72\3\0\1\72\1\u0154\22\72\23\0"+
    "\2\72\1\0\1\72\1\u0155\7\72\2\0\1\72\3\0"+
    "\24\72\23\0\2\72\1\0\4\72\1\u0156\4\72\2\0"+
    "\1\72\3\0\24\72\23\0\2\72\1\0\11\72\2\0"+
    "\1\72\3\0\4\72\1\u0157\17\72\23\0\2\72\1\0"+
    "\3\72\1\u0158\5\72\2\0\1\72\3\0\24\72\23\0"+
    "\2\72\1\0\11\72\2\0\1\72\3\0\1\72\1\u0159"+
    "\22\72\23\0\2\72\1\0\2\72\1\u015a\6\72\2\0"+
    "\1\72\3\0\24\72\23\0\2\72\1\0\1\72\1\u015b"+
    "\7\72\2\0\1\72\3\0\24\72\23\0\2\72\1\0"+
    "\11\72\2\0\1\72\3\0\5\72\1\u015c\16\72\23\0"+
    "\2\72\1\0\4\72\1\u015d\4\72\2\0\1\72\3\0"+
    "\24\72\23\0\2\72\1\0\11\72\2\0\1\72\3\0"+
    "\5\72\1\u015e\16\72\23\0\2\72\1\0\11\72\2\0"+
    "\1\72\3\0\3\72\1\u015f\20\72\23\0\2\17\1\0"+
    "\3\17\1\u0160\5\17\2\0\1\17\3\0\24\17\23\0"+
    "\2\17\1\0\11\17\2\0\1\17\3\0\1\u0161\23\17"+
    "\23\0\2\17\1\0\11\17\2\0\1\17\3\0\2\17"+
    "\1\u0162\21\17\23\0\2\17\1\0\5\17\1\u0163\3\17"+
    "\2\0\1\17\3\0\24\17\23\0\2\17\1\0\11\17"+
    "\2\0\1\17\3\0\3\17\1\u0164\20\17\23\0\2\17"+
    "\1\0\11\17\2\0\1\17\3\0\1\u0165\23\17\23\0"+
    "\2\17\1\0\1\u0166\10\17\2\0\1\17\3\0\24\17"+
    "\23\0\2\17\1\0\11\17\2\0\1\17\3\0\5\17"+
    "\1\u0167\16\17\23\0\2\17\1\0\11\17\2\0\1\17"+
    "\3\0\1\u0168\23\17\23\0\2\17\1\0\4\17\1\u0169"+
    "\4\17\2\0\1\17\3\0\24\17\23\0\2\17\1\0"+
    "\4\17\1\u016a\4\17\2\0\1\17\3\0\24\17\23\0"+
    "\2\17\1\0\5\17\1\u016b\3\17\2\0\1\17\3\0"+
    "\24\17\23\0\2\17\1\0\2\17\1\u016c\6\17\2\0"+
    "\1\17\3\0\24\17\23\0\2\17\1\0\11\17\2\0"+
    "\1\17\3\0\1\u016d\23\17\23\0\2\17\1\0\11\17"+
    "\2\0\1\17\3\0\5\17\1\u016e\16\17\23\0\2\17"+
    "\1\0\5\17\1\u016f\3\17\2\0\1\17\3\0\24\17"+
    "\23\0\2\17\1\0\2\17\1\u0170\6\17\2\0\1\17"+
    "\3\0\24\17\23\0\2\17\1\0\11\17\2\0\1\17"+
    "\3\0\15\17\1\u0171\6\17\23\0\2\17\1\0\1\17"+
    "\1\u0172\7\17\2\0\1\17\3\0\24\17\23\0\2\17"+
    "\1\0\3\17\1\u0173\5\17\2\0\1\17\3\0\24\17"+
    "\23\0\2\17\1\0\11\17\2\0\1\17\3\0\3\17"+
    "\1\u0174\20\17\23\0\2\17\1\0\11\17\2\0\1\17"+
    "\3\0\5\17\1\u0175\16\17\23\0\2\72\1\0\3\72"+
    "\1\u0176\5\72\2\0\1\72\3\0\24\72\23\0\2\72"+
    "\1\0\11\72\2\0\1\72\3\0\1\u0177\23\72\23\0"+
    "\2\72\1\0\11\72\2\0\1\72\3\0\2\72\1\u0178"+
    "\21\72\23\0\2\72\1\0\5\72\1\u0179\3\72\2\0"+
    "\1\72\3\0\24\72\23\0\2\72\1\0\11\72\2\0"+
    "\1\72\3\0\3\72\1\u017a\20\72\23\0\2\72\1\0"+
    "\11\72\2\0\1\72\3\0\1\u017b\23\72\23\0\2\72"+
    "\1\0\1\u017c\10\72\2\0\1\72\3\0\24\72\23\0"+
    "\2\72\1\0\11\72\2\0\1\72\3\0\5\72\1\u017d"+
    "\16\72\23\0\2\72\1\0\11\72\2\0\1\72\3\0"+
    "\1\u017e\23\72\23\0\2\72\1\0\4\72\1\u017f\4\72"+
    "\2\0\1\72\3\0\24\72\23\0\2\72\1\0\4\72"+
    "\1\u0180\4\72\2\0\1\72\3\0\24\72\23\0\2\72"+
    "\1\0\5\72\1\u0181\3\72\2\0\1\72\3\0\24\72"+
    "\23\0\2\72\1\0\2\72\1\u0182\6\72\2\0\1\72"+
    "\3\0\24\72\23\0\2\72\1\0\11\72\2\0\1\72"+
    "\3\0\1\u0183\23\72\23\0\2\72\1\0\11\72\2\0"+
    "\1\72\3\0\5\72\1\u0184\16\72\23\0\2\72\1\0"+
    "\5\72\1\u0185\3\72\2\0\1\72\3\0\24\72\23\0"+
    "\2\72\1\0\2\72\1\u0186\6\72\2\0\1\72\3\0"+
    "\24\72\23\0\2\72\1\0\11\72\2\0\1\72\3\0"+
    "\15\72\1\u0187\6\72\23\0\2\72\1\0\1\72\1\u0188"+
    "\7\72\2\0\1\72\3\0\24\72\23\0\2\72\1\0"+
    "\3\72\1\u0189\5\72\2\0\1\72\3\0\24\72\23\0"+
    "\2\72\1\0\11\72\2\0\1\72\3\0\3\72\1\u018a"+
    "\20\72\23\0\2\72\1\0\11\72\2\0\1\72\3\0"+
    "\5\72\1\u018b\16\72\23\0\2\17\1\0\1\17\1\u018c"+
    "\7\17\2\0\1\17\3\0\24\17\23\0\2\17\1\0"+
    "\4\17\1\u018d\4\17\2\0\1\17\3\0\24\17\23\0"+
    "\2\17\1\0\11\17\2\0\1\17\3\0\5\17\1\u018e"+
    "\16\17\23\0\2\17\1\0\1\17\1\u018f\7\17\2\0"+
    "\1\17\3\0\24\17\23\0\2\17\1\0\3\17\1\u0190"+
    "\5\17\2\0\1\17\3\0\24\17\23\0\2\17\1\0"+
    "\1\17\1\u0191\7\17\2\0\1\17\3\0\24\17\23\0"+
    "\2\17\1\0\11\17\2\0\1\17\3\0\1\17\1\u0192"+
    "\22\17\23\0\2\17\1\0\11\17\2\0\1\17\3\0"+
    "\1\17\1\u0193\22\17\23\0\2\17\1\0\11\17\2\0"+
    "\1\17\3\0\1\u0194\23\17\23\0\2\17\1\0\11\17"+
    "\2\0\1\17\3\0\6\17\1\u0195\15\17\23\0\2\17"+
    "\1\0\11\17\2\0\1\17\3\0\4\17\1\u0196\17\17"+
    "\23\0\2\17\1\0\11\17\2\0\1\17\3\0\3\17"+
    "\1\u0197\20\17\23\0\2\17\1\0\2\17\1\u0198\6\17"+
    "\2\0\1\17\3\0\24\17\23\0\2\17\1\0\10\17"+
    "\1\u0199\2\0\1\17\3\0\24\17\23\0\2\17\1\0"+
    "\4\17\1\u019a\4\17\2\0\1\17\3\0\24\17\23\0"+
    "\2\17\1\0\11\17\2\0\1\17\3\0\5\17\1\u019b"+
    "\16\17\23\0\2\17\1\0\3\17\1\u019c\5\17\2\0"+
    "\1\17\3\0\24\17\23\0\2\17\1\0\4\17\1\u019d"+
    "\1\u019e\3\17\2\0\1\17\3\0\24\17\23\0\2\17"+
    "\1\0\4\17\1\u019f\1\u01a0\3\17\2\0\1\17\3\0"+
    "\24\17\23\0\2\17\1\0\11\17\2\0\1\17\3\0"+
    "\21\17\1\u01a1\2\17\23\0\2\72\1\0\1\72\1\u01a2"+
    "\7\72\2\0\1\72\3\0\24\72\23\0\2\72\1\0"+
    "\4\72\1\u01a3\4\72\2\0\1\72\3\0\24\72\23\0"+
    "\2\72\1\0\11\72\2\0\1\72\3\0\5\72\1\u01a4"+
    "\16\72\23\0\2\72\1\0\1\72\1\u01a5\7\72\2\0"+
    "\1\72\3\0\24\72\23\0\2\72\1\0\3\72\1\u01a6"+
    "\5\72\2\0\1\72\3\0\24\72\23\0\2\72\1\0"+
    "\1\72\1\u01a7\7\72\2\0\1\72\3\0\24\72\23\0"+
    "\2\72\1\0\11\72\2\0\1\72\3\0\1\72\1\u01a8"+
    "\22\72\23\0\2\72\1\0\11\72\2\0\1\72\3\0"+
    "\1\72\1\u01a9\22\72\23\0\2\72\1\0\11\72\2\0"+
    "\1\72\3\0\1\u01aa\23\72\23\0\2\72\1\0\11\72"+
    "\2\0\1\72\3\0\6\72\1\u01ab\15\72\23\0\2\72"+
    "\1\0\11\72\2\0\1\72\3\0\4\72\1\u01ac\17\72"+
    "\23\0\2\72\1\0\11\72\2\0\1\72\3\0\3\72"+
    "\1\u01ad\20\72\23\0\2\72\1\0\2\72\1\u01ae\6\72"+
    "\2\0\1\72\3\0\24\72\23\0\2\72\1\0\10\72"+
    "\1\u01af\2\0\1\72\3\0\24\72\23\0\2\72\1\0"+
    "\4\72\1\u01b0\4\72\2\0\1\72\3\0\24\72\23\0"+
    "\2\72\1\0\11\72\2\0\1\72\3\0\5\72\1\u01b1"+
    "\16\72\23\0\2\72\1\0\3\72\1\u01b2\5\72\2\0"+
    "\1\72\3\0\24\72\23\0\2\72\1\0\4\72\1\u01b3"+
    "\1\u01b4\3\72\2\0\1\72\3\0\24\72\23\0\2\72"+
    "\1\0\4\72\1\u01b5\1\u01b6\3\72\2\0\1\72\3\0"+
    "\24\72\23\0\2\72\1\0\11\72\2\0\1\72\3\0"+
    "\21\72\1\u01b7\2\72\23\0\2\17\1\0\2\17\1\u01b8"+
    "\6\17\2\0\1\17\3\0\24\17\23\0\2\17\1\0"+
    "\2\17\1\u01b9\6\17\2\0\1\17\3\0\24\17\23\0"+
    "\2\17\1\0\2\17\1\u01ba\6\17\2\0\1\17\3\0"+
    "\24\17\23\0\2\17\1\0\10\17\1\u01bb\2\0\1\17"+
    "\3\0\24\17\23\0\2\17\1\0\1\17\1\u01bc\7\17"+
    "\2\0\1\17\3\0\24\17\23\0\2\17\1\0\2\17"+
    "\1\u01bd\6\17\2\0\1\17\3\0\24\17\23\0\2\17"+
    "\1\0\11\17\2\0\1\17\3\0\16\17\1\u01be\5\17"+
    "\23\0\2\17\1\0\1\17\1\u01bf\7\17\2\0\1\17"+
    "\3\0\24\17\23\0\2\17\1\0\5\17\1\u01c0\3\17"+
    "\2\0\1\17\3\0\24\17\23\0\2\17\1\0\11\17"+
    "\2\0\1\17\3\0\7\17\1\u01c1\1\u01c2\1\u01c3\12\17"+
    "\23\0\2\17\1\0\11\17\2\0\1\17\3\0\3\17"+
    "\1\u01c4\20\17\23\0\2\17\1\0\11\17\2\0\1\17"+
    "\3\0\5\17\1\u01c5\16\17\23\0\2\17\1\0\10\17"+
    "\1\u01c6\2\0\1\17\3\0\24\17\23\0\2\17\1\0"+
    "\3\17\1\u01c7\5\17\2\0\1\17\3\0\24\17\23\0"+
    "\2\17\1\0\4\17\1\u01c8\4\17\2\0\1\17\3\0"+
    "\24\17\23\0\2\17\1\0\10\17\1\u01c9\2\0\1\17"+
    "\3\0\24\17\23\0\2\17\1\0\10\17\1\u01ca\2\0"+
    "\1\17\3\0\24\17\23\0\2\17\1\0\10\17\1\u01cb"+
    "\2\0\1\17\3\0\24\17\23\0\2\17\1\0\10\17"+
    "\1\u01cc\2\0\1\17\3\0\24\17\23\0\2\17\1\0"+
    "\4\17\1\u01cd\4\17\2\0\1\17\3\0\24\17\23\0"+
    "\2\72\1\0\2\72\1\u01ce\6\72\2\0\1\72\3\0"+
    "\24\72\23\0\2\72\1\0\2\72\1\u01cf\6\72\2\0"+
    "\1\72\3\0\24\72\23\0\2\72\1\0\2\72\1\u01d0"+
    "\6\72\2\0\1\72\3\0\24\72\23\0\2\72\1\0"+
    "\10\72\1\u01d1\2\0\1\72\3\0\24\72\23\0\2\72"+
    "\1\0\1\72\1\u01d2\7\72\2\0\1\72\3\0\24\72"+
    "\23\0\2\72\1\0\2\72\1\u01d3\6\72\2\0\1\72"+
    "\3\0\24\72\23\0\2\72\1\0\11\72\2\0\1\72"+
    "\3\0\16\72\1\u01d4\5\72\23\0\2\72\1\0\1\72"+
    "\1\u01d5\7\72\2\0\1\72\3\0\24\72\23\0\2\72"+
    "\1\0\5\72\1\u01d6\3\72\2\0\1\72\3\0\24\72"+
    "\23\0\2\72\1\0\11\72\2\0\1\72\3\0\7\72"+
    "\1\u01d7\1\u01d8\1\u01d9\12\72\23\0\2\72\1\0\11\72"+
    "\2\0\1\72\3\0\3\72\1\u01da\20\72\23\0\2\72"+
    "\1\0\11\72\2\0\1\72\3\0\5\72\1\u01db\16\72"+
    "\23\0\2\72\1\0\10\72\1\u01dc\2\0\1\72\3\0"+
    "\24\72\23\0\2\72\1\0\3\72\1\u01dd\5\72\2\0"+
    "\1\72\3\0\24\72\23\0\2\72\1\0\4\72\1\u01de"+
    "\4\72\2\0\1\72\3\0\24\72\23\0\2\72\1\0"+
    "\10\72\1\u01df\2\0\1\72\3\0\24\72\23\0\2\72"+
    "\1\0\10\72\1\u01e0\2\0\1\72\3\0\24\72\23\0"+
    "\2\72\1\0\10\72\1\u01e1\2\0\1\72\3\0\24\72"+
    "\23\0\2\72\1\0\10\72\1\u01e2\2\0\1\72\3\0"+
    "\24\72\23\0\2\72\1\0\4\72\1\u01e3\4\72\2\0"+
    "\1\72\3\0\24\72\23\0\2\17\1\0\5\17\1\u01e4"+
    "\3\17\2\0\1\17\3\0\24\17\23\0\2\17\1\0"+
    "\5\17\1\u01e5\3\17\2\0\1\17\3\0\24\17\23\0"+
    "\2\17\1\0\11\17\2\0\1\17\3\0\1\u01e6\23\17"+
    "\23\0\2\17\1\0\1\17\1\u01e7\7\17\2\0\1\17"+
    "\3\0\24\17\23\0\2\17\1\0\5\17\1\u01e8\3\17"+
    "\2\0\1\17\3\0\24\17\23\0\2\17\1\0\11\17"+
    "\2\0\1\17\3\0\1\17\1\u01e9\22\17\23\0\2\17"+
    "\1\0\4\17\1\u01ea\4\17\2\0\1\17\3\0\24\17"+
    "\23\0\2\17\1\0\4\17\1\u01eb\1\u01ec\3\17\2\0"+
    "\1\17\3\0\24\17\23\0\2\17\1\0\3\17\1\u01ed"+
    "\5\17\2\0\1\17\3\0\24\17\23\0\2\17\1\0"+
    "\7\17\1\u01ee\1\17\2\0\1\17\3\0\24\17\23\0"+
    "\2\72\1\0\5\72\1\u01ef\3\72\2\0\1\72\3\0"+
    "\24\72\23\0\2\72\1\0\5\72\1\u01f0\3\72\2\0"+
    "\1\72\3\0\24\72\23\0\2\72\1\0\11\72\2\0"+
    "\1\72\3\0\1\u01f1\23\72\23\0\2\72\1\0\1\72"+
    "\1\u01f2\7\72\2\0\1\72\3\0\24\72\23\0\2\72"+
    "\1\0\5\72\1\u01f3\3\72\2\0\1\72\3\0\24\72"+
    "\23\0\2\72\1\0\11\72\2\0\1\72\3\0\1\72"+
    "\1\u01f4\22\72\23\0\2\72\1\0\4\72\1\u01f5\4\72"+
    "\2\0\1\72\3\0\24\72\23\0\2\72\1\0\4\72"+
    "\1\u01f6\1\u01f7\3\72\2\0\1\72\3\0\24\72\23\0"+
    "\2\72\1\0\3\72\1\u01f8\5\72\2\0\1\72\3\0"+
    "\24\72\23\0\2\72\1\0\7\72\1\u01f9\1\72\2\0"+
    "\1\72\3\0\24\72\23\0\2\17\1\0\11\17\2\0"+
    "\1\17\3\0\1\17\1\u01fa\22\17\23\0\2\17\1\0"+
    "\4\17\1\u01fb\4\17\2\0\1\17\3\0\24\17\23\0"+
    "\2\17\1\0\7\17\1\u01fc\1\17\2\0\1\17\3\0"+
    "\24\17\23\0\2\17\1\0\5\17\1\u01fd\3\17\2\0"+
    "\1\17\3\0\24\17\23\0\2\17\1\0\2\17\1\u01fe"+
    "\6\17\2\0\1\17\3\0\24\17\23\0\2\17\1\0"+
    "\10\17\1\u01ff\2\0\1\17\3\0\24\17\23\0\2\17"+
    "\1\0\10\17\1\u0200\2\0\1\17\3\0\24\17\23\0"+
    "\2\17\1\0\1\17\1\u0201\7\17\2\0\1\17\3\0"+
    "\24\17\23\0\2\72\1\0\11\72\2\0\1\72\3\0"+
    "\1\72\1\u0202\22\72\23\0\2\72\1\0\4\72\1\u0203"+
    "\4\72\2\0\1\72\3\0\24\72\23\0\2\72\1\0"+
    "\7\72\1\u0204\1\72\2\0\1\72\3\0\24\72\23\0"+
    "\2\72\1\0\5\72\1\u0205\3\72\2\0\1\72\3\0"+
    "\24\72\23\0\2\72\1\0\2\72\1\u0206\6\72\2\0"+
    "\1\72\3\0\24\72\23\0\2\72\1\0\10\72\1\u0207"+
    "\2\0\1\72\3\0\24\72\23\0\2\72\1\0\10\72"+
    "\1\u0208\2\0\1\72\3\0\24\72\23\0\2\72\1\0"+
    "\1\72\1\u0209\7\72\2\0\1\72\3\0\24\72\23\0"+
    "\2\17\1\0\1\17\1\u020a\7\17\2\0\1\17\3\0"+
    "\24\17\23\0\2\17\1\0\7\17\1\u020b\1\17\2\0"+
    "\1\17\3\0\24\17\23\0\2\17\1\0\1\17\1\u020c"+
    "\7\17\2\0\1\17\3\0\24\17\23\0\2\17\1\0"+
    "\2\17\1\u020d\6\17\2\0\1\17\3\0\24\17\23\0"+
    "\2\17\1\0\10\17\1\u020e\2\0\1\17\3\0\24\17"+
    "\23\0\2\72\1\0\1\72\1\u020f\7\72\2\0\1\72"+
    "\3\0\24\72\23\0\2\72\1\0\7\72\1\u0210\1\72"+
    "\2\0\1\72\3\0\24\72\23\0\2\72\1\0\1\72"+
    "\1\u0211\7\72\2\0\1\72\3\0\24\72\23\0\2\72"+
    "\1\0\2\72\1\u0212\6\72\2\0\1\72\3\0\24\72"+
    "\23\0\2\72\1\0\10\72\1\u0213\2\0\1\72\3\0"+
    "\24\72\23\0\2\17\1\0\2\17\1\u0214\6\17\2\0"+
    "\1\17\3\0\24\17\23\0\2\17\1\0\4\17\1\u0215"+
    "\4\17\2\0\1\17\3\0\24\17\23\0\2\72\1\0"+
    "\2\72\1\u0216\6\72\2\0\1\72\3\0\24\72\23\0"+
    "\2\72\1\0\4\72\1\u0217\4\72\2\0\1\72\3\0"+
    "\24\72\23\0\2\17\1\0\5\17\1\u0218\3\17\2\0"+
    "\1\17\3\0\24\17\23\0\2\17\1\0\11\17\2\0"+
    "\1\17\3\0\1\u0219\23\17\23\0\2\72\1\0\5\72"+
    "\1\u021a\3\72\2\0\1\72\3\0\24\72\23\0\2\72"+
    "\1\0\11\72\2\0\1\72\3\0\1\u021b\23\72\23\0"+
    "\2\17\1\0\5\17\1\u021c\3\17\2\0\1\17\3\0"+
    "\24\17\23\0\2\72\1\0\5\72\1\u021d\3\72\2\0"+
    "\1\72\3\0\24\72\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23883];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\1\1\0\1\11\1\1\1\11\3\1\1\11\12\1"+
    "\1\11\13\1\1\11\3\1\13\11\1\1\1\11\3\1"+
    "\1\11\12\1\1\11\13\1\1\11\3\1\12\11\1\1"+
    "\1\0\15\1\1\0\1\11\1\1\1\0\20\1\2\11"+
    "\1\1\1\0\15\1\1\0\1\11\20\1\1\11\1\0"+
    "\1\11\17\1\1\11\1\0\21\1\1\0\1\11\143\1"+
    "\1\0\32\1\1\0\330\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[541];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
        public int contadorLocal;
        private token tmp;
        private void comprobacionEspacios(){
                if(token.contadorLocal==(token.contadorGlobal+1)){
                        token.contadorGlobal +=1;
                }else if(token.contadorLocal < token.contadorGlobal){
                      token.contadorGlobal = token.contadorLocal;
                }else if(token.contadorLocal  == token.contadorGlobal){

                }else{
                       
                }
        }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLexico(java.io.Reader in) {
  
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {         System.out.println("Finalizacion de analizador lexico");
        return 1;
        //return new Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.ID, tmp);
            } 
            // fall through
          case 128: break;
          case 2: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.ID, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 129: break;
          case 3: 
            { System.out.println("Error");
            } 
            // fall through
          case 130: break;
          case 4: 
            { token.contadorLocal=0;
                                System.out.println("Finlinea estado2");
            } 
            // fall through
          case 131: break;
          case 5: 
            { 
            } 
            // fall through
          case 132: break;
          case 6: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.ENTERO, tmp);
            } 
            // fall through
          case 133: break;
          case 7: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.PUNTO, tmp);
            } 
            // fall through
          case 134: break;
          case 8: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.DIVISION, tmp);
            } 
            // fall through
          case 135: break;
          case 9: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.MULTI, tmp);
            } 
            // fall through
          case 136: break;
          case 10: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym., tmp);
            } 
            // fall through
          case 137: break;
          case 11: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.IGUAL, tmp);
            } 
            // fall through
          case 138: break;
          case 12: 
            { System.out.println("finlinea" + "estado2");
            } 
            // fall through
          case 139: break;
          case 13: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.DOSPUNTOS, tmp);
            } 
            // fall through
          case 140: break;
          case 14: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.SUMA, tmp);
            } 
            // fall through
          case 141: break;
          case 15: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.RESTA, tmp);
            } 
            // fall through
          case 142: break;
          case 16: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.APARENTESIS, tmp);
            } 
            // fall through
          case 143: break;
          case 17: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.CPARENTESIS, tmp);
            } 
            // fall through
          case 144: break;
          case 18: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.PORCENTAJE, tmp);
            } 
            // fall through
          case 145: break;
          case 19: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.COMA, tmp);
            } 
            // fall through
          case 146: break;
          case 20: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.ACORCHETEC, tmp);
            } 
            // fall through
          case 147: break;
          case 21: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp+ "estado2");
                                //return new Symbol(sym.CCORCHETEC, tmp);
            } 
            // fall through
          case 148: break;
          case 22: 
            { System.out.print(yytext());
            } 
            // fall through
          case 149: break;
          case 23: 
            { System.out.println("Error estado1");
            } 
            // fall through
          case 150: break;
          case 24: 
            { tmp = new token(yycolumn, yyline, "FINLINEA", token.contadorLocal);
                                token.contadorLocal=0;
                                //return new Symbol(sym.FINLINEA, tmp);
                                yybegin(YYINITIAL);
                                System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 151: break;
          case 25: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.ENTERO, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 152: break;
          case 26: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.PUNTO, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 153: break;
          case 27: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.DIVISION, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 154: break;
          case 28: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.MULTI, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 155: break;
          case 29: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym., tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 156: break;
          case 30: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.IGUAL, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 157: break;
          case 31: 
            { tmp = new token(yycolumn, yyline, "FINLINEA", token.contadorLocal);
                                        token.contadorLocal = 0;
                                        //return new Symbol(sym.FINLINEA, tmp);
                                        yybegin(YYINITIAL);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 158: break;
          case 32: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.DOSPUNTOS, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 159: break;
          case 33: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.SUMA, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 160: break;
          case 34: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.RESTA, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 161: break;
          case 35: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.APARENTESIS, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 162: break;
          case 36: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.CPARENTESIS, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 163: break;
          case 37: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.PORCENTAJE, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 164: break;
          case 38: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.COMA, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 165: break;
          case 39: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.ACORCHETEC, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 166: break;
          case 40: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.CCORCHETEC, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 167: break;
          case 41: 
            { //System.out.println("Espacio Blanco");
            } 
            // fall through
          case 168: break;
          case 42: 
            { token.contadorLocal+=1;
                                System.out.println ("Tabulador: "+token.contadorLocal);
            } 
            // fall through
          case 169: break;
          case 43: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.SI, tmp);
            } 
            // fall through
          case 170: break;
          case 44: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.STRING, tmp);
            } 
            // fall through
          case 171: break;
          case 45: 
            { //System.out.println("Comentario: " + yytext());
            } 
            // fall through
          case 172: break;
          case 46: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp+ "estado2");
                                //return new Symbol(sym.OR, tmp);
            } 
            // fall through
          case 173: break;
          case 47: 
            { System.out.println("Espacio Blanco estado1");
            } 
            // fall through
          case 174: break;
          case 48: 
            { token.contadorLocal+=1;
                                        //System.out.println ("Tabulador: "+token.contadorLocal);
                                        System.out.println("tabulador"+ "estado1");
            } 
            // fall through
          case 175: break;
          case 49: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.SI, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 176: break;
          case 50: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.STRING, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 177: break;
          case 51: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.OR, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 178: break;
          case 52: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.REAL, tmp);
            } 
            // fall through
          case 179: break;
          case 53: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp+ "estado2");
                                //return new Symbol(sym.AND, tmp);
            } 
            // fall through
          case 180: break;
          case 54: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.REAL, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 181: break;
          case 55: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.AND, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 182: break;
          case 56: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.RAIZ, tmp);
            } 
            // fall through
          case 183: break;
          case 57: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.LEER, tmp);
            } 
            // fall through
          case 184: break;
          case 58: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.SENO, tmp);
            } 
            // fall through
          case 185: break;
          case 59: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.SINO, tmp);
            } 
            // fall through
          case 186: break;
          case 60: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.NULO, tmp);
            } 
            // fall through
          case 187: break;
          case 61: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.RAIZ, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 188: break;
          case 62: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.LEER, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 189: break;
          case 63: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.SENO, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 190: break;
          case 64: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.SINO, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 191: break;
          case 65: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.NULO, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 192: break;
          case 66: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.DESDE, tmp);
            } 
            // fall through
          case 193: break;
          case 67: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado1");
                                //return new Symbol(sym.FALSO, tmp);
            } 
            // fall through
          case 194: break;
          case 68: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.CLASE, tmp);
            } 
            // fall through
          case 195: break;
          case 69: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.HACER, tmp);
            } 
            // fall through
          case 196: break;
          case 70: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.DESDE, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 197: break;
          case 71: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.FALSO, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 198: break;
          case 72: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.CLASE, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 199: break;
          case 73: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.HACER, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 200: break;
          case 74: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.CADENA, tmp);
            } 
            // fall through
          case 201: break;
          case 75: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.COSENO, tmp);
            } 
            // fall through
          case 202: break;
          case 76: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.CADENA, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 203: break;
          case 77: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.COSENO, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 204: break;
          case 78: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.INCLUIR, tmp);
            } 
            // fall through
          case 205: break;
          case 79: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.METODOS, tmp);
            } 
            // fall through
          case 206: break;
          case 80: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.INCLUIR, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 207: break;
          case 81: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.METODOS, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 208: break;
          case 82: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.ELIMINAR, tmp);
            } 
            // fall through
          case 209: break;
          case 83: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                //return new Symbol(sym.ESCRIBIR, tmp);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
            } 
            // fall through
          case 210: break;
          case 84: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.ENTONCES, tmp);
            } 
            // fall through
          case 211: break;
          case 85: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.EXTIENDE, tmp);
            } 
            // fall through
          case 212: break;
          case 86: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.DEVOLVER, tmp);
            } 
            // fall through
          case 213: break;
          case 87: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.TANGENTE, tmp);
            } 
            // fall through
          case 214: break;
          case 88: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.BOOLEANO, tmp);
            } 
            // fall through
          case 215: break;
          case 89: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.MIENTRAS, tmp);
            } 
            // fall through
          case 216: break;
          case 90: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.SYMBOL, tmp);
            } 
            // fall through
          case 217: break;
          case 91: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.PRIVADO, tmp);
            } 
            // fall through
          case 218: break;
          case 92: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.PUBLICA, tmp);
            } 
            // fall through
          case 219: break;
          case 93: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.PUBLICO, tmp);
            } 
            // fall through
          case 220: break;
          case 94: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.ELIMINAR, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 221: break;
          case 95: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.ESCRIBIR, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 222: break;
          case 96: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.ENTONCES, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 223: break;
          case 97: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.EXTIENDE, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 224: break;
          case 98: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.DEVOLVER, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 225: break;
          case 99: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.TANGENTE, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 226: break;
          case 100: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.BOOLEANO, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 227: break;
          case 101: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.MIENTRAS, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 228: break;
          case 102: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.SYMBOL, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 229: break;
          case 103: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.PRIVADO, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 230: break;
          case 104: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.PUBLICA, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 231: break;
          case 105: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.PUBLICO, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 232: break;
          case 106: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.VERDADERO, tmp);
            } 
            // fall through
          case 233: break;
          case 107: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.LOG, tmp);
            } 
            // fall through
          case 234: break;
          case 108: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.PRINCIPAL, tmp);
            } 
            // fall through
          case 235: break;
          case 109: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.VERDADERO, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 236: break;
          case 110: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.LOG, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 237: break;
          case 111: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.PRINCIPAL, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 238: break;
          case 112: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.INSTANCIAR, tmp);
            } 
            // fall through
          case 239: break;
          case 113: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.PROTEGIDAS, tmp);
            } 
            // fall through
          case 240: break;
          case 114: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.PROTEGIDO, tmp);
            } 
            // fall through
          case 241: break;
          case 115: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.INSTANCIAR, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 242: break;
          case 116: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.PROTEGIDAS, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 243: break;
          case 117: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.PROTEGIDO, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 244: break;
          case 118: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.CADENAREAL, tmp);
            } 
            // fall through
          case 245: break;
          case 119: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.CONSTRUCTOR, tmp);
            } 
            // fall through
          case 246: break;
          case 120: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.PROPIEDADES, tmp);
            } 
            // fall through
          case 247: break;
          case 121: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.CADENAREAL, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 248: break;
          case 122: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.CONSTRUCTOR, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 249: break;
          case 123: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.PROPIEDADES, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 250: break;
          case 124: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.CADENAENTERO, tmp);
            } 
            // fall through
          case 251: break;
          case 125: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.CADENAENTERO, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 252: break;
          case 126: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                System.out.println(tmp+ "estado2");
                                //return new Symbol(sym.CADENABOOLEANO, tmp);
            } 
            // fall through
          case 253: break;
          case 127: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        //return new Symbol(sym.CADENABOOLEANO, tmp);
                                        System.out.println(tmp+ "estado1");
            } 
            // fall through
          case 254: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexico [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorLexico scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorLexico(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
