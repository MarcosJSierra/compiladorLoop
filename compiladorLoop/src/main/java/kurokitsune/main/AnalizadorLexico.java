/* The following code was generated by JFlex 1.7.0 */

package kurokitsune.main;
import java_cup.runtime.Symbol;
import informacion.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/main/java/tools/reglasLoop.jflex</tt>
 */
class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int estado1 = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\2\1\73\1\74\1\1\22\0\1\3\1\54\1\21\2\0"+
    "\1\63\1\0\1\24\1\61\1\62\1\25\1\57\1\64\1\60\1\6"+
    "\1\23\1\4\11\5\1\56\1\55\1\52\1\53\1\52\2\0\1\34"+
    "\1\37\1\22\1\41\1\35\10\22\1\40\1\42\1\50\1\22\1\36"+
    "\10\22\1\65\1\0\1\66\1\71\1\72\1\0\1\13\1\30\1\31"+
    "\1\12\1\10\1\15\1\43\1\46\1\33\2\22\1\16\1\44\1\26"+
    "\1\14\1\47\1\22\1\11\1\17\1\27\1\32\1\7\1\22\1\51"+
    "\1\22\1\45\1\67\1\20\1\70\7\0\1\73\u1fa2\0\1\73\1\73"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\1\2\3\1\4\10\5\1\1"+
    "\1\6\1\7\13\5\1\10\1\11\1\1\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\2\30\1\1\2\31\1\32"+
    "\10\33\1\1\1\34\1\35\13\33\1\36\1\37\1\1"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\0"+
    "\14\5\1\57\1\0\1\60\1\61\1\0\10\5\1\62"+
    "\6\5\2\12\1\63\1\64\1\0\14\33\1\65\1\0"+
    "\1\66\10\33\1\67\6\33\2\40\1\0\2\70\16\5"+
    "\1\61\1\0\11\5\1\71\7\5\1\0\2\72\30\33"+
    "\1\73\7\33\1\56\6\5\1\74\1\75\4\5\1\76"+
    "\1\5\1\77\1\100\1\61\1\101\20\5\1\64\6\33"+
    "\1\102\1\103\5\33\1\104\1\33\1\105\1\106\1\107"+
    "\21\33\1\0\7\5\1\110\1\5\1\111\6\5\1\112"+
    "\4\5\1\113\5\5\1\0\7\33\1\114\2\33\1\115"+
    "\6\33\1\116\5\33\1\117\5\33\3\5\1\120\7\5"+
    "\1\121\1\122\12\5\3\33\1\123\10\33\1\124\1\125"+
    "\13\33\11\5\1\126\3\5\1\127\1\130\10\5\12\33"+
    "\1\131\4\33\1\132\1\133\10\33\1\5\1\134\1\135"+
    "\1\136\1\137\1\140\2\5\1\141\5\5\1\142\2\5"+
    "\1\143\1\144\1\145\1\146\1\5\1\33\1\147\1\150"+
    "\1\151\1\152\1\153\3\33\1\154\6\33\1\155\2\33"+
    "\1\156\1\157\1\160\1\161\1\33\1\162\1\5\1\163"+
    "\10\5\1\164\1\165\2\33\1\166\11\33\1\167\1\170"+
    "\4\5\1\171\1\172\1\173\1\5\1\174\5\33\1\175"+
    "\1\33\1\176\1\177\1\33\1\5\1\200\1\5\1\201"+
    "\1\202\1\203\1\33\1\204\1\33\1\205\1\206\1\207"+
    "\2\5\2\33\1\210\1\5\1\211\1\33\1\212\1\213";

  private static int [] zzUnpackAction() {
    int [] result = new int[574];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\172\0\364\0\u0131\0\u016e"+
    "\0\172\0\u01ab\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319"+
    "\0\u0356\0\u0393\0\u03d0\0\172\0\u040d\0\u044a\0\u0487\0\u04c4"+
    "\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\172"+
    "\0\u06ac\0\u06ac\0\u06e9\0\172\0\172\0\172\0\172\0\172"+
    "\0\172\0\172\0\172\0\172\0\172\0\172\0\172\0\172"+
    "\0\u0726\0\172\0\u0763\0\u07a0\0\u07dd\0\172\0\u081a\0\u0857"+
    "\0\u0894\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u03d0"+
    "\0\172\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad"+
    "\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\172\0\u0cde\0\u0cde\0\u0d1b"+
    "\0\172\0\172\0\172\0\172\0\172\0\172\0\172\0\172"+
    "\0\172\0\172\0\172\0\172\0\172\0\u0d58\0\u0d95\0\u0dd2"+
    "\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba"+
    "\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u0393\0\172\0\u10eb\0\u1128"+
    "\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310"+
    "\0\u029f\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb"+
    "\0\172\0\172\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629"+
    "\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811"+
    "\0\u184e\0\u0a02\0\172\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f"+
    "\0\u19bc\0\u19f9\0\u1a36\0\u090e\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a"+
    "\0\u1b67\0\u1ba4\0\u1be1\0\172\0\u1c1e\0\172\0\u1c5b\0\u1c98"+
    "\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80"+
    "\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\172\0\u1fee\0\u202b"+
    "\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213"+
    "\0\u029f\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381\0\u23be"+
    "\0\u23fb\0\172\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u252c\0\u2569"+
    "\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751"+
    "\0\u278e\0\u27cb\0\u2808\0\u2845\0\u2882\0\u28bf\0\u28fc\0\u2939"+
    "\0\u2976\0\u29b3\0\u29f0\0\u090e\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4"+
    "\0\u2b21\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc"+
    "\0\u2d09\0\u2d46\0\u029f\0\u029f\0\u2d83\0\u2dc0\0\u2dfd\0\u2e3a"+
    "\0\u029f\0\u2e77\0\u029f\0\u029f\0\u2eb4\0\u029f\0\u2ef1\0\u2f2e"+
    "\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\u305f\0\u309c\0\u30d9\0\u3116"+
    "\0\u3153\0\u3190\0\u31cd\0\u320a\0\u3247\0\u3284\0\u32c1\0\u32fe"+
    "\0\u333b\0\u3378\0\u33b5\0\u33f2\0\u342f\0\u090e\0\u090e\0\u346c"+
    "\0\u34a9\0\u34e6\0\u3523\0\u3560\0\u090e\0\u359d\0\u090e\0\u090e"+
    "\0\u090e\0\u35da\0\u3617\0\u3654\0\u3691\0\u36ce\0\u370b\0\u3748"+
    "\0\u3785\0\u37c2\0\u37ff\0\u383c\0\u3879\0\u38b6\0\u38f3\0\u3930"+
    "\0\u396d\0\u39aa\0\u2bd8\0\u39e7\0\u3a24\0\u3a61\0\u3a9e\0\u3adb"+
    "\0\u3b18\0\u3b55\0\u029f\0\u3b92\0\u029f\0\u3bcf\0\u3c0c\0\u3c49"+
    "\0\u3c86\0\u3cc3\0\u3d00\0\u029f\0\u3d3d\0\u3d7a\0\u3db7\0\u3df4"+
    "\0\u029f\0\u3e31\0\u3e6e\0\u3eab\0\u3ee8\0\u3f25\0\u32c1\0\u3f62"+
    "\0\u3f9f\0\u3fdc\0\u4019\0\u4056\0\u4093\0\u40d0\0\u090e\0\u410d"+
    "\0\u414a\0\u090e\0\u4187\0\u41c4\0\u4201\0\u423e\0\u427b\0\u42b8"+
    "\0\u090e\0\u42f5\0\u4332\0\u436f\0\u43ac\0\u43e9\0\u090e\0\u4426"+
    "\0\u4463\0\u44a0\0\u44dd\0\u451a\0\u4557\0\u4594\0\u45d1\0\u029f"+
    "\0\u460e\0\u464b\0\u4688\0\u46c5\0\u4702\0\u473f\0\u477c\0\u47b9"+
    "\0\u029f\0\u47f6\0\u4833\0\u4870\0\u48ad\0\u48ea\0\u4927\0\u4964"+
    "\0\u49a1\0\u49de\0\u4a1b\0\u4a58\0\u4a95\0\u4ad2\0\u090e\0\u4b0f"+
    "\0\u4b4c\0\u4b89\0\u4bc6\0\u4c03\0\u4c40\0\u4c7d\0\u4cba\0\u4cf7"+
    "\0\u090e\0\u4d34\0\u4d71\0\u4dae\0\u4deb\0\u4e28\0\u4e65\0\u4ea2"+
    "\0\u4edf\0\u4f1c\0\u4f59\0\u4f96\0\u4fd3\0\u5010\0\u504d\0\u508a"+
    "\0\u50c7\0\u5104\0\u5141\0\u517e\0\u51bb\0\u029f\0\u51f8\0\u5235"+
    "\0\u5272\0\u029f\0\u029f\0\u52af\0\u52ec\0\u5329\0\u5366\0\u53a3"+
    "\0\u53e0\0\u541d\0\u545a\0\u5497\0\u54d4\0\u5511\0\u554e\0\u558b"+
    "\0\u55c8\0\u5605\0\u5642\0\u567f\0\u56bc\0\u090e\0\u56f9\0\u5736"+
    "\0\u5773\0\u57b0\0\u090e\0\u090e\0\u57ed\0\u582a\0\u5867\0\u58a4"+
    "\0\u58e1\0\u591e\0\u595b\0\u5998\0\u59d5\0\u029f\0\u029f\0\u029f"+
    "\0\u029f\0\u029f\0\u5a12\0\u5a4f\0\u029f\0\u5a8c\0\u5ac9\0\u5b06"+
    "\0\u5b43\0\u5b80\0\u029f\0\u5bbd\0\u5bfa\0\u029f\0\u029f\0\u029f"+
    "\0\u029f\0\u5c37\0\u5c74\0\u090e\0\u090e\0\u090e\0\u090e\0\u090e"+
    "\0\u5cb1\0\u5cee\0\u5d2b\0\u090e\0\u5d68\0\u5da5\0\u5de2\0\u5e1f"+
    "\0\u5e5c\0\u5e99\0\u090e\0\u5ed6\0\u5f13\0\u090e\0\u090e\0\u090e"+
    "\0\u090e\0\u5f50\0\u029f\0\u5f8d\0\u029f\0\u5fca\0\u6007\0\u6044"+
    "\0\u6081\0\u60be\0\u60fb\0\u6138\0\u6175\0\u029f\0\u090e\0\u61b2"+
    "\0\u61ef\0\u090e\0\u622c\0\u6269\0\u62a6\0\u62e3\0\u6320\0\u635d"+
    "\0\u639a\0\u63d7\0\u6414\0\u090e\0\u029f\0\u6451\0\u648e\0\u64cb"+
    "\0\u6508\0\u029f\0\u029f\0\u029f\0\u6545\0\u090e\0\u6582\0\u65bf"+
    "\0\u65fc\0\u6639\0\u6676\0\u090e\0\u66b3\0\u090e\0\u090e\0\u66f0"+
    "\0\u672d\0\u029f\0\u676a\0\u029f\0\u029f\0\u090e\0\u67a7\0\u090e"+
    "\0\u67e4\0\u090e\0\u090e\0\u090e\0\u6821\0\u685e\0\u689b\0\u68d8"+
    "\0\u029f\0\u6915\0\u090e\0\u6952\0\u029f\0\u090e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[574];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\2\16\1\17\1\20\1\21\1\3"+
    "\1\22\1\16\1\23\1\3\1\24\1\25\1\26\1\27"+
    "\1\30\1\16\1\31\1\32\5\16\1\33\1\16\1\34"+
    "\1\16\1\35\1\36\1\37\1\16\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\3\2\60\1\3"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\2\73\1\74\1\75\1\76\1\3\1\77"+
    "\1\73\1\100\1\3\1\101\1\102\1\103\1\104\1\105"+
    "\1\73\1\106\1\107\5\73\1\110\1\73\1\111\1\73"+
    "\1\112\1\113\1\114\1\73\1\115\1\116\1\117\1\120"+
    "\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130"+
    "\1\131\1\132\1\133\1\134\1\3\2\60\77\0\1\5"+
    "\73\0\2\135\1\136\14\0\1\135\62\0\1\137\73\0"+
    "\1\10\1\137\72\0\2\16\1\0\1\16\1\140\7\16"+
    "\2\0\1\16\3\0\24\16\20\0\1\16\6\0\2\16"+
    "\1\0\7\16\1\141\1\142\2\0\1\16\3\0\1\143"+
    "\22\16\1\144\20\0\1\16\6\0\2\16\1\0\1\16"+
    "\1\145\2\16\1\146\4\16\2\0\1\16\3\0\24\16"+
    "\20\0\1\16\6\0\2\16\1\0\1\16\1\147\7\16"+
    "\2\0\1\16\3\0\24\16\20\0\1\16\6\0\2\16"+
    "\1\0\11\16\2\0\1\16\3\0\24\16\20\0\1\16"+
    "\6\0\2\16\1\0\4\16\1\150\4\16\2\0\1\16"+
    "\3\0\24\16\20\0\1\16\6\0\2\16\1\0\1\16"+
    "\1\151\3\16\1\152\3\16\2\0\1\16\3\0\24\16"+
    "\20\0\1\16\6\0\2\16\1\0\1\16\1\153\7\16"+
    "\2\0\1\16\3\0\5\16\1\154\16\16\20\0\1\16"+
    "\5\0\16\155\1\156\2\155\2\0\24\155\46\0\1\157"+
    "\1\0\1\160\53\0\2\16\1\0\11\16\2\0\1\16"+
    "\3\0\4\16\1\161\17\16\20\0\1\16\6\0\2\16"+
    "\1\0\4\16\1\162\4\16\2\0\1\16\3\0\24\16"+
    "\20\0\1\16\6\0\2\16\1\0\5\16\1\163\3\16"+
    "\2\0\1\16\3\0\24\16\20\0\1\16\6\0\2\16"+
    "\1\0\4\16\1\164\1\165\1\16\1\166\1\16\2\0"+
    "\1\16\3\0\24\16\20\0\1\16\6\0\2\16\1\0"+
    "\11\16\2\0\1\16\3\0\1\167\23\16\20\0\1\16"+
    "\6\0\2\16\1\0\11\16\2\0\1\16\3\0\12\16"+
    "\1\170\11\16\20\0\1\16\6\0\2\16\1\0\11\16"+
    "\2\0\1\16\3\0\10\16\1\171\13\16\20\0\1\16"+
    "\6\0\2\16\1\0\1\16\1\172\7\16\2\0\1\16"+
    "\3\0\5\16\1\173\16\16\20\0\1\16\6\0\2\16"+
    "\1\0\4\16\1\174\4\16\2\0\1\16\3\0\24\16"+
    "\20\0\1\16\6\0\2\16\1\0\2\16\1\175\6\16"+
    "\2\0\1\16\3\0\4\16\1\176\17\16\20\0\1\16"+
    "\6\0\2\16\1\0\2\16\1\177\6\16\2\0\1\16"+
    "\3\0\24\16\20\0\1\16\55\0\1\40\22\0\1\200"+
    "\1\201\74\0\1\62\73\0\2\202\1\203\14\0\1\202"+
    "\62\0\1\204\73\0\1\65\1\204\72\0\2\73\1\0"+
    "\1\73\1\205\7\73\2\0\1\73\3\0\24\73\20\0"+
    "\1\73\6\0\2\73\1\0\7\73\1\206\1\207\2\0"+
    "\1\73\3\0\1\210\22\73\1\211\20\0\1\73\6\0"+
    "\2\73\1\0\1\73\1\212\2\73\1\213\4\73\2\0"+
    "\1\73\3\0\24\73\20\0\1\73\6\0\2\73\1\0"+
    "\1\73\1\214\7\73\2\0\1\73\3\0\24\73\20\0"+
    "\1\73\6\0\2\73\1\0\11\73\2\0\1\73\3\0"+
    "\24\73\20\0\1\73\6\0\2\73\1\0\4\73\1\215"+
    "\4\73\2\0\1\73\3\0\24\73\20\0\1\73\6\0"+
    "\2\73\1\0\1\73\1\216\3\73\1\217\3\73\2\0"+
    "\1\73\3\0\24\73\20\0\1\73\6\0\2\73\1\0"+
    "\1\73\1\220\7\73\2\0\1\73\3\0\5\73\1\221"+
    "\16\73\20\0\1\73\5\0\16\222\1\223\2\222\2\0"+
    "\24\222\27\0\2\73\1\0\11\73\2\0\1\73\3\0"+
    "\4\73\1\224\17\73\20\0\1\73\6\0\2\73\1\0"+
    "\4\73\1\225\4\73\2\0\1\73\3\0\24\73\20\0"+
    "\1\73\6\0\2\73\1\0\5\73\1\226\3\73\2\0"+
    "\1\73\3\0\24\73\20\0\1\73\6\0\2\73\1\0"+
    "\4\73\1\227\1\230\1\73\1\231\1\73\2\0\1\73"+
    "\3\0\24\73\20\0\1\73\6\0\2\73\1\0\11\73"+
    "\2\0\1\73\3\0\1\232\23\73\20\0\1\73\6\0"+
    "\2\73\1\0\11\73\2\0\1\73\3\0\12\73\1\233"+
    "\11\73\20\0\1\73\6\0\2\73\1\0\11\73\2\0"+
    "\1\73\3\0\10\73\1\234\13\73\20\0\1\73\6\0"+
    "\2\73\1\0\1\73\1\235\7\73\2\0\1\73\3\0"+
    "\5\73\1\236\16\73\20\0\1\73\6\0\2\73\1\0"+
    "\4\73\1\237\4\73\2\0\1\73\3\0\24\73\20\0"+
    "\1\73\6\0\2\73\1\0\2\73\1\240\6\73\2\0"+
    "\1\73\3\0\4\73\1\241\17\73\20\0\1\73\6\0"+
    "\2\73\1\0\2\73\1\242\6\73\2\0\1\73\3\0"+
    "\24\73\20\0\1\73\55\0\1\115\22\0\1\243\1\244"+
    "\73\0\2\135\1\245\14\0\1\135\60\0\1\246\1\247"+
    "\73\0\2\16\1\0\2\16\1\250\6\16\2\0\1\16"+
    "\3\0\24\16\20\0\1\16\6\0\2\16\1\0\11\16"+
    "\2\0\1\16\3\0\5\16\1\251\16\16\20\0\1\16"+
    "\6\0\2\16\1\0\11\16\2\0\1\16\3\0\3\16"+
    "\1\252\20\16\20\0\1\16\6\0\2\16\1\0\11\16"+
    "\2\0\1\16\3\0\1\16\1\253\22\16\20\0\1\16"+
    "\6\0\2\16\1\0\11\16\2\0\1\16\3\0\1\16"+
    "\1\254\22\16\20\0\1\16\6\0\2\16\1\0\4\16"+
    "\1\255\4\16\2\0\1\16\3\0\24\16\20\0\1\16"+
    "\6\0\2\16\1\0\11\16\2\0\1\16\3\0\5\16"+
    "\1\256\16\16\20\0\1\16\6\0\2\16\1\0\1\257"+
    "\7\16\1\260\2\0\1\16\3\0\24\16\20\0\1\16"+
    "\6\0\2\16\1\0\7\16\1\261\1\16\2\0\1\16"+
    "\3\0\24\16\20\0\1\16\6\0\2\16\1\0\1\16"+
    "\1\262\7\16\2\0\1\16\3\0\24\16\20\0\1\16"+
    "\6\0\2\16\1\0\11\16\2\0\1\16\3\0\15\16"+
    "\1\263\6\16\20\0\1\16\6\0\2\16\1\0\11\16"+
    "\2\0\1\16\3\0\1\264\23\16\20\0\1\16\6\0"+
    "\2\16\1\0\11\16\2\0\1\16\3\0\1\265\23\16"+
    "\20\0\1\16\3\0\2\266\16\157\1\0\3\157\1\0"+
    "\24\157\12\0\1\157\7\0\1\157\1\0\20\160\1\0"+
    "\3\160\1\267\24\160\12\0\1\160\7\0\1\160\4\0"+
    "\2\16\1\0\7\16\1\270\1\16\2\0\1\16\3\0"+
    "\24\16\20\0\1\16\6\0\2\16\1\0\11\16\2\0"+
    "\1\16\3\0\1\271\23\16\20\0\1\16\6\0\2\16"+
    "\1\0\7\16\1\272\1\16\2\0\1\16\3\0\24\16"+
    "\20\0\1\16\6\0\2\16\1\0\3\16\1\273\5\16"+
    "\2\0\1\16\3\0\24\16\20\0\1\16\6\0\2\16"+
    "\1\0\10\16\1\274\2\0\1\16\3\0\1\275\23\16"+
    "\20\0\1\16\6\0\2\16\1\0\4\16\1\276\4\16"+
    "\2\0\1\16\3\0\24\16\20\0\1\16\6\0\2\16"+
    "\1\0\10\16\1\277\2\0\1\16\3\0\3\16\1\300"+
    "\20\16\20\0\1\16\6\0\2\16\1\0\11\16\2\0"+
    "\1\16\3\0\13\16\1\301\10\16\20\0\1\16\6\0"+
    "\2\16\1\0\11\16\2\0\1\16\3\0\1\16\1\302"+
    "\22\16\20\0\1\16\6\0\2\16\1\0\1\16\1\303"+
    "\7\16\2\0\1\16\3\0\24\16\20\0\1\16\6\0"+
    "\2\16\1\0\11\16\2\0\1\16\3\0\3\16\1\304"+
    "\20\16\20\0\1\16\6\0\2\16\1\0\5\16\1\305"+
    "\3\16\2\0\1\16\3\0\5\16\1\306\16\16\20\0"+
    "\1\16\6\0\2\16\1\0\11\16\2\0\1\16\3\0"+
    "\2\16\1\307\21\16\20\0\1\16\6\0\2\16\1\0"+
    "\11\16\2\0\1\16\3\0\5\16\1\310\16\16\20\0"+
    "\1\16\4\0\1\201\73\0\2\202\1\311\14\0\1\202"+
    "\60\0\1\312\1\313\73\0\2\73\1\0\2\73\1\314"+
    "\6\73\2\0\1\73\3\0\24\73\20\0\1\73\6\0"+
    "\2\73\1\0\11\73\2\0\1\73\3\0\5\73\1\315"+
    "\16\73\20\0\1\73\6\0\2\73\1\0\11\73\2\0"+
    "\1\73\3\0\3\73\1\316\20\73\20\0\1\73\6\0"+
    "\2\73\1\0\11\73\2\0\1\73\3\0\1\73\1\317"+
    "\22\73\20\0\1\73\6\0\2\73\1\0\11\73\2\0"+
    "\1\73\3\0\1\73\1\320\22\73\20\0\1\73\6\0"+
    "\2\73\1\0\4\73\1\321\4\73\2\0\1\73\3\0"+
    "\24\73\20\0\1\73\6\0\2\73\1\0\11\73\2\0"+
    "\1\73\3\0\5\73\1\322\16\73\20\0\1\73\6\0"+
    "\2\73\1\0\1\323\7\73\1\324\2\0\1\73\3\0"+
    "\3\73\1\325\20\73\20\0\1\73\6\0\2\73\1\0"+
    "\7\73\1\326\1\73\2\0\1\73\3\0\24\73\20\0"+
    "\1\73\6\0\2\73\1\0\1\73\1\327\7\73\2\0"+
    "\1\73\3\0\24\73\20\0\1\73\6\0\2\73\1\0"+
    "\11\73\2\0\1\73\3\0\15\73\1\330\6\73\20\0"+
    "\1\73\6\0\2\73\1\0\11\73\2\0\1\73\3\0"+
    "\1\331\23\73\20\0\1\73\6\0\2\73\1\0\11\73"+
    "\2\0\1\73\3\0\1\332\23\73\20\0\1\73\6\0"+
    "\2\73\1\0\7\73\1\333\1\73\2\0\1\73\3\0"+
    "\24\73\20\0\1\73\6\0\2\73\1\0\11\73\2\0"+
    "\1\73\3\0\1\334\23\73\20\0\1\73\6\0\2\73"+
    "\1\0\7\73\1\335\1\73\2\0\1\73\3\0\24\73"+
    "\20\0\1\73\6\0\2\73\1\0\3\73\1\336\5\73"+
    "\2\0\1\73\3\0\24\73\20\0\1\73\6\0\2\73"+
    "\1\0\10\73\1\337\2\0\1\73\3\0\1\340\23\73"+
    "\20\0\1\73\6\0\2\73\1\0\4\73\1\341\4\73"+
    "\2\0\1\73\3\0\24\73\20\0\1\73\6\0\2\73"+
    "\1\0\10\73\1\342\2\0\1\73\3\0\3\73\1\343"+
    "\20\73\20\0\1\73\6\0\2\73\1\0\11\73\2\0"+
    "\1\73\3\0\13\73\1\344\10\73\20\0\1\73\6\0"+
    "\2\73\1\0\11\73\2\0\1\73\3\0\1\73\1\345"+
    "\22\73\20\0\1\73\6\0\2\73\1\0\1\73\1\346"+
    "\7\73\2\0\1\73\3\0\24\73\20\0\1\73\6\0"+
    "\2\73\1\0\11\73\2\0\1\73\3\0\3\73\1\347"+
    "\20\73\20\0\1\73\6\0\2\73\1\0\5\73\1\350"+
    "\3\73\2\0\1\73\3\0\5\73\1\351\16\73\20\0"+
    "\1\73\6\0\2\73\1\0\11\73\2\0\1\73\3\0"+
    "\2\73\1\352\21\73\20\0\1\73\6\0\2\73\1\0"+
    "\11\73\2\0\1\73\3\0\5\73\1\353\16\73\20\0"+
    "\1\73\4\0\1\244\73\0\2\135\1\354\14\0\1\135"+
    "\61\0\1\247\73\0\2\16\1\0\3\16\1\355\5\16"+
    "\2\0\1\16\3\0\24\16\20\0\1\16\6\0\2\16"+
    "\1\0\11\16\2\0\1\16\3\0\16\16\1\356\5\16"+
    "\20\0\1\16\6\0\2\16\1\0\2\16\1\357\6\16"+
    "\2\0\1\16\3\0\24\16\20\0\1\16\6\0\2\16"+
    "\1\0\1\16\1\360\3\16\1\361\3\16\2\0\1\16"+
    "\3\0\24\16\20\0\1\16\6\0\2\16\1\0\11\16"+
    "\2\0\1\16\3\0\5\16\1\362\16\16\20\0\1\16"+
    "\6\0\2\16\1\0\7\16\1\363\1\16\2\0\1\16"+
    "\3\0\24\16\20\0\1\16\6\0\2\16\1\0\11\16"+
    "\2\0\1\16\3\0\17\16\1\364\4\16\20\0\1\16"+
    "\6\0\2\16\1\0\5\16\1\365\3\16\2\0\1\16"+
    "\3\0\24\16\20\0\1\16\6\0\2\16\1\0\3\16"+
    "\1\366\5\16\2\0\1\16\3\0\1\16\1\367\22\16"+
    "\20\0\1\16\6\0\2\16\1\0\10\16\1\370\2\0"+
    "\1\16\3\0\24\16\20\0\1\16\6\0\2\16\1\0"+
    "\2\16\1\371\6\16\2\0\1\16\3\0\24\16\20\0"+
    "\1\16\6\0\2\16\1\0\4\16\1\372\4\16\2\0"+
    "\1\16\3\0\24\16\20\0\1\16\6\0\2\16\1\0"+
    "\5\16\1\373\3\16\2\0\1\16\3\0\24\16\20\0"+
    "\1\16\6\0\2\16\1\0\5\16\1\374\3\16\2\0"+
    "\1\16\3\0\24\16\20\0\1\16\25\0\1\375\55\0"+
    "\2\16\1\0\5\16\1\376\3\16\2\0\1\16\3\0"+
    "\24\16\20\0\1\16\6\0\2\16\1\0\11\16\2\0"+
    "\1\16\3\0\15\16\1\377\6\16\20\0\1\16\6\0"+
    "\2\16\1\0\1\16\1\u0100\7\16\2\0\1\16\3\0"+
    "\24\16\20\0\1\16\6\0\2\16\1\0\1\16\1\u0101"+
    "\7\16\2\0\1\16\3\0\24\16\20\0\1\16\6\0"+
    "\2\16\1\0\1\16\1\u0102\7\16\2\0\1\16\3\0"+
    "\24\16\20\0\1\16\6\0\2\16\1\0\10\16\1\u0103"+
    "\2\0\1\16\3\0\24\16\20\0\1\16\6\0\2\16"+
    "\1\0\10\16\1\u0104\2\0\1\16\3\0\24\16\20\0"+
    "\1\16\6\0\2\16\1\0\11\16\2\0\1\16\3\0"+
    "\1\16\1\u0105\22\16\20\0\1\16\6\0\2\16\1\0"+
    "\7\16\1\u0106\1\16\2\0\1\16\3\0\24\16\20\0"+
    "\1\16\6\0\2\16\1\0\5\16\1\u0107\3\16\2\0"+
    "\1\16\3\0\24\16\20\0\1\16\6\0\2\16\1\0"+
    "\11\16\2\0\1\16\3\0\1\u0108\23\16\20\0\1\16"+
    "\6\0\2\16\1\0\1\16\1\u0109\7\16\2\0\1\16"+
    "\3\0\24\16\20\0\1\16\6\0\2\16\1\0\11\16"+
    "\2\0\1\16\3\0\1\16\1\u010a\17\16\1\u010b\2\16"+
    "\20\0\1\16\6\0\2\16\1\0\1\u010c\10\16\2\0"+
    "\1\16\3\0\24\16\20\0\1\16\6\0\2\16\1\0"+
    "\7\16\1\u010d\1\16\2\0\1\16\3\0\24\16\20\0"+
    "\1\16\6\0\2\16\1\0\11\16\2\0\1\16\3\0"+
    "\1\u010e\23\16\20\0\1\16\3\0\2\202\1\u010f\14\0"+
    "\1\202\61\0\1\313\73\0\2\73\1\0\3\73\1\u0110"+
    "\5\73\2\0\1\73\3\0\24\73\20\0\1\73\6\0"+
    "\2\73\1\0\11\73\2\0\1\73\3\0\16\73\1\u0111"+
    "\5\73\20\0\1\73\6\0\2\73\1\0\2\73\1\u0112"+
    "\6\73\2\0\1\73\3\0\24\73\20\0\1\73\6\0"+
    "\2\73\1\0\1\73\1\u0113\3\73\1\u0114\3\73\2\0"+
    "\1\73\3\0\24\73\20\0\1\73\6\0\2\73\1\0"+
    "\11\73\2\0\1\73\3\0\5\73\1\u0115\16\73\20\0"+
    "\1\73\6\0\2\73\1\0\7\73\1\u0116\1\73\2\0"+
    "\1\73\3\0\24\73\20\0\1\73\6\0\2\73\1\0"+
    "\11\73\2\0\1\73\3\0\17\73\1\u0117\4\73\20\0"+
    "\1\73\6\0\2\73\1\0\5\73\1\u0118\3\73\2\0"+
    "\1\73\3\0\24\73\20\0\1\73\6\0\2\73\1\0"+
    "\3\73\1\u0119\5\73\2\0\1\73\3\0\1\73\1\u011a"+
    "\22\73\20\0\1\73\6\0\2\73\1\0\2\73\1\u011b"+
    "\6\73\2\0\1\73\3\0\24\73\20\0\1\73\6\0"+
    "\2\73\1\0\10\73\1\u011c\2\0\1\73\3\0\24\73"+
    "\20\0\1\73\6\0\2\73\1\0\2\73\1\u011d\6\73"+
    "\2\0\1\73\3\0\24\73\20\0\1\73\6\0\2\73"+
    "\1\0\4\73\1\u011e\4\73\2\0\1\73\3\0\24\73"+
    "\20\0\1\73\6\0\2\73\1\0\5\73\1\u011f\3\73"+
    "\2\0\1\73\3\0\24\73\20\0\1\73\6\0\2\73"+
    "\1\0\5\73\1\u0120\3\73\2\0\1\73\3\0\24\73"+
    "\20\0\1\73\6\0\2\73\1\0\5\73\1\u0121\3\73"+
    "\2\0\1\73\3\0\24\73\20\0\1\73\6\0\2\73"+
    "\1\0\11\73\2\0\1\73\3\0\15\73\1\u0122\6\73"+
    "\20\0\1\73\6\0\2\73\1\0\1\73\1\u0123\7\73"+
    "\2\0\1\73\3\0\24\73\20\0\1\73\6\0\2\73"+
    "\1\0\1\73\1\u0124\7\73\2\0\1\73\3\0\24\73"+
    "\20\0\1\73\6\0\2\73\1\0\1\73\1\u0125\7\73"+
    "\2\0\1\73\3\0\24\73\20\0\1\73\6\0\2\73"+
    "\1\0\10\73\1\u0126\2\0\1\73\3\0\24\73\20\0"+
    "\1\73\6\0\2\73\1\0\10\73\1\u0127\2\0\1\73"+
    "\3\0\24\73\20\0\1\73\6\0\2\73\1\0\11\73"+
    "\2\0\1\73\3\0\1\73\1\u0128\22\73\20\0\1\73"+
    "\6\0\2\73\1\0\2\73\1\u0129\4\73\1\u012a\1\73"+
    "\2\0\1\73\3\0\24\73\20\0\1\73\6\0\2\73"+
    "\1\0\5\73\1\u012b\3\73\2\0\1\73\3\0\24\73"+
    "\20\0\1\73\6\0\2\73\1\0\11\73\2\0\1\73"+
    "\3\0\1\u012c\23\73\20\0\1\73\6\0\2\73\1\0"+
    "\1\73\1\u012d\7\73\2\0\1\73\3\0\24\73\20\0"+
    "\1\73\6\0\2\73\1\0\11\73\2\0\1\73\3\0"+
    "\1\73\1\u012e\17\73\1\u012f\2\73\20\0\1\73\6\0"+
    "\2\73\1\0\1\u0130\10\73\2\0\1\73\3\0\24\73"+
    "\20\0\1\73\6\0\2\73\1\0\7\73\1\u0131\1\73"+
    "\2\0\1\73\3\0\24\73\20\0\1\73\6\0\2\73"+
    "\1\0\11\73\2\0\1\73\3\0\1\u0132\23\73\20\0"+
    "\1\73\3\0\2\135\1\u0133\14\0\1\135\60\0\2\16"+
    "\1\0\4\16\1\u0134\4\16\2\0\1\16\3\0\24\16"+
    "\20\0\1\16\6\0\2\16\1\0\11\16\2\0\1\16"+
    "\3\0\5\16\1\u0135\16\16\20\0\1\16\6\0\2\16"+
    "\1\0\11\16\2\0\1\16\3\0\5\16\1\u0136\16\16"+
    "\20\0\1\16\6\0\2\16\1\0\2\16\1\u0137\6\16"+
    "\2\0\1\16\3\0\24\16\20\0\1\16\6\0\2\16"+
    "\1\0\11\16\2\0\1\16\3\0\1\u0138\23\16\20\0"+
    "\1\16\6\0\2\16\1\0\1\16\1\u0139\7\16\2\0"+
    "\1\16\3\0\24\16\20\0\1\16\6\0\2\16\1\0"+
    "\7\16\1\u013a\1\16\2\0\1\16\3\0\24\16\20\0"+
    "\1\16\6\0\2\16\1\0\1\16\1\u013b\7\16\2\0"+
    "\1\16\3\0\24\16\20\0\1\16\6\0\2\16\1\0"+
    "\2\16\1\u013c\6\16\2\0\1\16\3\0\24\16\20\0"+
    "\1\16\6\0\2\16\1\0\5\16\1\u013d\3\16\2\0"+
    "\1\16\3\0\24\16\20\0\1\16\6\0\2\16\1\0"+
    "\2\16\1\u013e\6\16\2\0\1\16\3\0\24\16\20\0"+
    "\1\16\3\0\2\266\15\0\1\266\60\0\2\16\1\0"+
    "\1\16\1\u013f\7\16\2\0\1\16\3\0\24\16\20\0"+
    "\1\16\6\0\2\16\1\0\4\16\1\u0140\4\16\2\0"+
    "\1\16\3\0\24\16\20\0\1\16\6\0\2\16\1\0"+
    "\11\16\2\0\1\16\3\0\1\u0141\23\16\20\0\1\16"+
    "\6\0\2\16\1\0\11\16\2\0\1\16\3\0\1\u0142"+
    "\23\16\20\0\1\16\6\0\2\16\1\0\11\16\2\0"+
    "\1\16\3\0\1\16\1\u0143\22\16\20\0\1\16\6\0"+
    "\2\16\1\0\1\16\1\u0144\7\16\2\0\1\16\3\0"+
    "\24\16\20\0\1\16\6\0\2\16\1\0\4\16\1\u0145"+
    "\4\16\2\0\1\16\3\0\24\16\20\0\1\16\6\0"+
    "\2\16\1\0\11\16\2\0\1\16\3\0\4\16\1\u0146"+
    "\17\16\20\0\1\16\6\0\2\16\1\0\3\16\1\u0147"+
    "\5\16\2\0\1\16\3\0\24\16\20\0\1\16\6\0"+
    "\2\16\1\0\11\16\2\0\1\16\3\0\1\16\1\u0148"+
    "\22\16\20\0\1\16\6\0\2\16\1\0\2\16\1\u0149"+
    "\6\16\2\0\1\16\3\0\24\16\20\0\1\16\6\0"+
    "\2\16\1\0\1\16\1\u014a\7\16\2\0\1\16\3\0"+
    "\24\16\20\0\1\16\6\0\2\16\1\0\11\16\2\0"+
    "\1\16\3\0\5\16\1\u014b\16\16\20\0\1\16\6\0"+
    "\2\16\1\0\4\16\1\u014c\4\16\2\0\1\16\3\0"+
    "\24\16\20\0\1\16\6\0\2\16\1\0\11\16\2\0"+
    "\1\16\3\0\5\16\1\u014d\16\16\20\0\1\16\6\0"+
    "\2\16\1\0\11\16\2\0\1\16\3\0\3\16\1\u014e"+
    "\20\16\20\0\1\16\3\0\2\202\1\u014f\14\0\1\202"+
    "\60\0\2\73\1\0\4\73\1\u0150\4\73\2\0\1\73"+
    "\3\0\24\73\20\0\1\73\6\0\2\73\1\0\11\73"+
    "\2\0\1\73\3\0\5\73\1\u0151\16\73\20\0\1\73"+
    "\6\0\2\73\1\0\11\73\2\0\1\73\3\0\5\73"+
    "\1\u0152\16\73\20\0\1\73\6\0\2\73\1\0\2\73"+
    "\1\u0153\6\73\2\0\1\73\3\0\24\73\20\0\1\73"+
    "\6\0\2\73\1\0\11\73\2\0\1\73\3\0\1\u0154"+
    "\23\73\20\0\1\73\6\0\2\73\1\0\1\73\1\u0155"+
    "\7\73\2\0\1\73\3\0\24\73\20\0\1\73\6\0"+
    "\2\73\1\0\7\73\1\u0156\1\73\2\0\1\73\3\0"+
    "\24\73\20\0\1\73\6\0\2\73\1\0\1\73\1\u0157"+
    "\7\73\2\0\1\73\3\0\24\73\20\0\1\73\6\0"+
    "\2\73\1\0\2\73\1\u0158\6\73\2\0\1\73\3\0"+
    "\24\73\20\0\1\73\6\0\2\73\1\0\1\73\1\u0159"+
    "\7\73\2\0\1\73\3\0\24\73\20\0\1\73\6\0"+
    "\2\73\1\0\5\73\1\u015a\3\73\2\0\1\73\3\0"+
    "\24\73\20\0\1\73\6\0\2\73\1\0\2\73\1\u015b"+
    "\6\73\2\0\1\73\3\0\24\73\20\0\1\73\6\0"+
    "\2\73\1\0\1\73\1\u015c\7\73\2\0\1\73\3\0"+
    "\24\73\20\0\1\73\6\0\2\73\1\0\4\73\1\u015d"+
    "\4\73\2\0\1\73\3\0\24\73\20\0\1\73\6\0"+
    "\2\73\1\0\11\73\2\0\1\73\3\0\1\u015e\23\73"+
    "\20\0\1\73\6\0\2\73\1\0\11\73\2\0\1\73"+
    "\3\0\1\u015f\23\73\20\0\1\73\6\0\2\73\1\0"+
    "\11\73\2\0\1\73\3\0\1\73\1\u0160\22\73\20\0"+
    "\1\73\6\0\2\73\1\0\1\73\1\u0161\7\73\2\0"+
    "\1\73\3\0\24\73\20\0\1\73\6\0\2\73\1\0"+
    "\4\73\1\u0162\4\73\2\0\1\73\3\0\24\73\20\0"+
    "\1\73\6\0\2\73\1\0\1\73\1\u0163\7\73\2\0"+
    "\1\73\3\0\24\73\20\0\1\73\6\0\2\73\1\0"+
    "\11\73\2\0\1\73\3\0\4\73\1\u0164\17\73\20\0"+
    "\1\73\6\0\2\73\1\0\3\73\1\u0165\5\73\2\0"+
    "\1\73\3\0\24\73\20\0\1\73\6\0\2\73\1\0"+
    "\11\73\2\0\1\73\3\0\1\73\1\u0166\22\73\20\0"+
    "\1\73\6\0\2\73\1\0\2\73\1\u0167\6\73\2\0"+
    "\1\73\3\0\24\73\20\0\1\73\6\0\2\73\1\0"+
    "\1\73\1\u0168\7\73\2\0\1\73\3\0\24\73\20\0"+
    "\1\73\6\0\2\73\1\0\11\73\2\0\1\73\3\0"+
    "\5\73\1\u0169\16\73\20\0\1\73\6\0\2\73\1\0"+
    "\4\73\1\u016a\4\73\2\0\1\73\3\0\24\73\20\0"+
    "\1\73\6\0\2\73\1\0\11\73\2\0\1\73\3\0"+
    "\5\73\1\u016b\16\73\20\0\1\73\6\0\2\73\1\0"+
    "\11\73\2\0\1\73\3\0\3\73\1\u016c\20\73\20\0"+
    "\1\73\6\0\2\16\1\0\3\16\1\u016d\5\16\2\0"+
    "\1\16\3\0\24\16\20\0\1\16\6\0\2\16\1\0"+
    "\11\16\2\0\1\16\3\0\1\u016e\23\16\20\0\1\16"+
    "\6\0\2\16\1\0\11\16\2\0\1\16\3\0\2\16"+
    "\1\u016f\21\16\20\0\1\16\6\0\2\16\1\0\5\16"+
    "\1\u0170\3\16\2\0\1\16\3\0\24\16\20\0\1\16"+
    "\6\0\2\16\1\0\11\16\2\0\1\16\3\0\3\16"+
    "\1\u0171\20\16\20\0\1\16\6\0\2\16\1\0\11\16"+
    "\2\0\1\16\3\0\1\u0172\23\16\20\0\1\16\6\0"+
    "\2\16\1\0\1\u0173\10\16\2\0\1\16\3\0\24\16"+
    "\20\0\1\16\6\0\2\16\1\0\11\16\2\0\1\16"+
    "\3\0\4\16\1\u0174\17\16\20\0\1\16\6\0\2\16"+
    "\1\0\11\16\2\0\1\16\3\0\5\16\1\u0175\16\16"+
    "\20\0\1\16\6\0\2\16\1\0\11\16\2\0\1\16"+
    "\3\0\1\u0176\23\16\20\0\1\16\6\0\2\16\1\0"+
    "\11\16\2\0\1\16\3\0\1\u0177\23\16\20\0\1\16"+
    "\6\0\2\16\1\0\4\16\1\u0178\4\16\2\0\1\16"+
    "\3\0\24\16\20\0\1\16\6\0\2\16\1\0\5\16"+
    "\1\u0179\3\16\2\0\1\16\3\0\24\16\20\0\1\16"+
    "\6\0\2\16\1\0\2\16\1\u017a\6\16\2\0\1\16"+
    "\3\0\24\16\20\0\1\16\6\0\2\16\1\0\11\16"+
    "\2\0\1\16\3\0\1\u017b\23\16\20\0\1\16\6\0"+
    "\2\16\1\0\11\16\2\0\1\16\3\0\5\16\1\u017c"+
    "\16\16\20\0\1\16\6\0\2\16\1\0\5\16\1\u017d"+
    "\3\16\2\0\1\16\3\0\24\16\20\0\1\16\6\0"+
    "\2\16\1\0\2\16\1\u017e\6\16\2\0\1\16\3\0"+
    "\24\16\20\0\1\16\6\0\2\16\1\0\11\16\2\0"+
    "\1\16\3\0\15\16\1\u017f\6\16\20\0\1\16\6\0"+
    "\2\16\1\0\1\16\1\u0180\7\16\2\0\1\16\3\0"+
    "\24\16\20\0\1\16\6\0\2\16\1\0\3\16\1\u0181"+
    "\5\16\2\0\1\16\3\0\24\16\20\0\1\16\6\0"+
    "\2\16\1\0\11\16\2\0\1\16\3\0\3\16\1\u0182"+
    "\20\16\20\0\1\16\6\0\2\16\1\0\11\16\2\0"+
    "\1\16\3\0\5\16\1\u0183\16\16\20\0\1\16\6\0"+
    "\2\73\1\0\3\73\1\u0184\5\73\2\0\1\73\3\0"+
    "\24\73\20\0\1\73\6\0\2\73\1\0\11\73\2\0"+
    "\1\73\3\0\1\u0185\23\73\20\0\1\73\6\0\2\73"+
    "\1\0\11\73\2\0\1\73\3\0\2\73\1\u0186\21\73"+
    "\20\0\1\73\6\0\2\73\1\0\5\73\1\u0187\3\73"+
    "\2\0\1\73\3\0\24\73\20\0\1\73\6\0\2\73"+
    "\1\0\11\73\2\0\1\73\3\0\3\73\1\u0188\20\73"+
    "\20\0\1\73\6\0\2\73\1\0\11\73\2\0\1\73"+
    "\3\0\1\u0189\23\73\20\0\1\73\6\0\2\73\1\0"+
    "\1\u018a\10\73\2\0\1\73\3\0\24\73\20\0\1\73"+
    "\6\0\2\73\1\0\11\73\2\0\1\73\3\0\4\73"+
    "\1\u018b\17\73\20\0\1\73\6\0\2\73\1\0\11\73"+
    "\2\0\1\73\3\0\16\73\1\u018c\5\73\20\0\1\73"+
    "\6\0\2\73\1\0\11\73\2\0\1\73\3\0\5\73"+
    "\1\u018d\16\73\20\0\1\73\6\0\2\73\1\0\11\73"+
    "\2\0\1\73\3\0\1\u018e\23\73\20\0\1\73\6\0"+
    "\2\73\1\0\11\73\2\0\1\73\3\0\1\u018f\23\73"+
    "\20\0\1\73\6\0\2\73\1\0\4\73\1\u0190\4\73"+
    "\2\0\1\73\3\0\24\73\20\0\1\73\6\0\2\73"+
    "\1\0\5\73\1\u0191\3\73\2\0\1\73\3\0\24\73"+
    "\20\0\1\73\6\0\2\73\1\0\2\73\1\u0192\6\73"+
    "\2\0\1\73\3\0\24\73\20\0\1\73\6\0\2\73"+
    "\1\0\11\73\2\0\1\73\3\0\1\u0193\23\73\20\0"+
    "\1\73\6\0\2\73\1\0\11\73\2\0\1\73\3\0"+
    "\16\73\1\u0194\5\73\20\0\1\73\6\0\2\73\1\0"+
    "\11\73\2\0\1\73\3\0\5\73\1\u0195\16\73\20\0"+
    "\1\73\6\0\2\73\1\0\5\73\1\u0196\3\73\2\0"+
    "\1\73\3\0\24\73\20\0\1\73\6\0\2\73\1\0"+
    "\2\73\1\u0197\6\73\2\0\1\73\3\0\24\73\20\0"+
    "\1\73\6\0\2\73\1\0\11\73\2\0\1\73\3\0"+
    "\15\73\1\u0198\6\73\20\0\1\73\6\0\2\73\1\0"+
    "\1\73\1\u0199\7\73\2\0\1\73\3\0\24\73\20\0"+
    "\1\73\6\0\2\73\1\0\3\73\1\u019a\5\73\2\0"+
    "\1\73\3\0\24\73\20\0\1\73\6\0\2\73\1\0"+
    "\11\73\2\0\1\73\3\0\3\73\1\u019b\20\73\20\0"+
    "\1\73\6\0\2\73\1\0\11\73\2\0\1\73\3\0"+
    "\5\73\1\u019c\16\73\20\0\1\73\6\0\2\16\1\0"+
    "\1\16\1\u019d\7\16\2\0\1\16\3\0\24\16\20\0"+
    "\1\16\6\0\2\16\1\0\4\16\1\u019e\4\16\2\0"+
    "\1\16\3\0\24\16\20\0\1\16\6\0\2\16\1\0"+
    "\11\16\2\0\1\16\3\0\5\16\1\u019f\16\16\20\0"+
    "\1\16\6\0\2\16\1\0\1\16\1\u01a0\7\16\2\0"+
    "\1\16\3\0\24\16\20\0\1\16\6\0\2\16\1\0"+
    "\3\16\1\u01a1\5\16\2\0\1\16\3\0\24\16\20\0"+
    "\1\16\6\0\2\16\1\0\1\16\1\u01a2\7\16\2\0"+
    "\1\16\3\0\24\16\20\0\1\16\6\0\2\16\1\0"+
    "\11\16\2\0\1\16\3\0\3\16\1\u01a3\20\16\20\0"+
    "\1\16\6\0\2\16\1\0\11\16\2\0\1\16\3\0"+
    "\1\16\1\u01a4\22\16\20\0\1\16\6\0\2\16\1\0"+
    "\11\16\2\0\1\16\3\0\1\16\1\u01a5\22\16\20\0"+
    "\1\16\6\0\2\16\1\0\5\16\1\u01a6\3\16\2\0"+
    "\1\16\3\0\24\16\20\0\1\16\6\0\2\16\1\0"+
    "\11\16\2\0\1\16\3\0\6\16\1\u01a7\15\16\20\0"+
    "\1\16\6\0\2\16\1\0\11\16\2\0\1\16\3\0"+
    "\4\16\1\u01a8\17\16\20\0\1\16\6\0\2\16\1\0"+
    "\11\16\2\0\1\16\3\0\3\16\1\u01a9\20\16\20\0"+
    "\1\16\6\0\2\16\1\0\2\16\1\u01aa\6\16\2\0"+
    "\1\16\3\0\24\16\20\0\1\16\6\0\2\16\1\0"+
    "\10\16\1\u01ab\2\0\1\16\3\0\24\16\20\0\1\16"+
    "\6\0\2\16\1\0\4\16\1\u01ac\4\16\2\0\1\16"+
    "\3\0\24\16\20\0\1\16\6\0\2\16\1\0\11\16"+
    "\2\0\1\16\3\0\5\16\1\u01ad\16\16\20\0\1\16"+
    "\6\0\2\16\1\0\3\16\1\u01ae\5\16\2\0\1\16"+
    "\3\0\24\16\20\0\1\16\6\0\2\16\1\0\4\16"+
    "\1\u01af\1\u01b0\3\16\2\0\1\16\3\0\24\16\20\0"+
    "\1\16\6\0\2\16\1\0\4\16\1\u01b1\1\u01b2\3\16"+
    "\2\0\1\16\3\0\24\16\20\0\1\16\6\0\2\16"+
    "\1\0\11\16\2\0\1\16\3\0\21\16\1\u01b3\2\16"+
    "\20\0\1\16\6\0\2\73\1\0\1\73\1\u01b4\7\73"+
    "\2\0\1\73\3\0\24\73\20\0\1\73\6\0\2\73"+
    "\1\0\4\73\1\u01b5\4\73\2\0\1\73\3\0\24\73"+
    "\20\0\1\73\6\0\2\73\1\0\11\73\2\0\1\73"+
    "\3\0\5\73\1\u01b6\16\73\20\0\1\73\6\0\2\73"+
    "\1\0\1\73\1\u01b7\7\73\2\0\1\73\3\0\24\73"+
    "\20\0\1\73\6\0\2\73\1\0\3\73\1\u01b8\5\73"+
    "\2\0\1\73\3\0\24\73\20\0\1\73\6\0\2\73"+
    "\1\0\1\73\1\u01b9\7\73\2\0\1\73\3\0\24\73"+
    "\20\0\1\73\6\0\2\73\1\0\11\73\2\0\1\73"+
    "\3\0\3\73\1\u01ba\20\73\20\0\1\73\6\0\2\73"+
    "\1\0\1\73\1\u01bb\7\73\2\0\1\73\3\0\24\73"+
    "\20\0\1\73\6\0\2\73\1\0\11\73\2\0\1\73"+
    "\3\0\1\73\1\u01bc\22\73\20\0\1\73\6\0\2\73"+
    "\1\0\11\73\2\0\1\73\3\0\1\73\1\u01bd\22\73"+
    "\20\0\1\73\6\0\2\73\1\0\5\73\1\u01be\3\73"+
    "\2\0\1\73\3\0\24\73\20\0\1\73\6\0\2\73"+
    "\1\0\11\73\2\0\1\73\3\0\6\73\1\u01bf\15\73"+
    "\20\0\1\73\6\0\2\73\1\0\11\73\2\0\1\73"+
    "\3\0\4\73\1\u01c0\17\73\20\0\1\73\6\0\2\73"+
    "\1\0\11\73\2\0\1\73\3\0\3\73\1\u01c1\20\73"+
    "\20\0\1\73\6\0\2\73\1\0\1\73\1\u01c2\7\73"+
    "\2\0\1\73\3\0\24\73\20\0\1\73\6\0\2\73"+
    "\1\0\2\73\1\u01c3\6\73\2\0\1\73\3\0\24\73"+
    "\20\0\1\73\6\0\2\73\1\0\10\73\1\u01c4\2\0"+
    "\1\73\3\0\24\73\20\0\1\73\6\0\2\73\1\0"+
    "\4\73\1\u01c5\4\73\2\0\1\73\3\0\24\73\20\0"+
    "\1\73\6\0\2\73\1\0\11\73\2\0\1\73\3\0"+
    "\5\73\1\u01c6\16\73\20\0\1\73\6\0\2\73\1\0"+
    "\3\73\1\u01c7\5\73\2\0\1\73\3\0\24\73\20\0"+
    "\1\73\6\0\2\73\1\0\4\73\1\u01c8\1\u01c9\3\73"+
    "\2\0\1\73\3\0\24\73\20\0\1\73\6\0\2\73"+
    "\1\0\4\73\1\u01ca\1\u01cb\3\73\2\0\1\73\3\0"+
    "\24\73\20\0\1\73\6\0\2\73\1\0\11\73\2\0"+
    "\1\73\3\0\21\73\1\u01cc\2\73\20\0\1\73\6\0"+
    "\2\16\1\0\2\16\1\u01cd\6\16\2\0\1\16\3\0"+
    "\24\16\20\0\1\16\6\0\2\16\1\0\2\16\1\u01ce"+
    "\6\16\2\0\1\16\3\0\24\16\20\0\1\16\6\0"+
    "\2\16\1\0\2\16\1\u01cf\6\16\2\0\1\16\3\0"+
    "\24\16\20\0\1\16\6\0\2\16\1\0\10\16\1\u01d0"+
    "\2\0\1\16\3\0\24\16\20\0\1\16\6\0\2\16"+
    "\1\0\1\16\1\u01d1\7\16\2\0\1\16\3\0\24\16"+
    "\20\0\1\16\6\0\2\16\1\0\2\16\1\u01d2\6\16"+
    "\2\0\1\16\3\0\24\16\20\0\1\16\6\0\2\16"+
    "\1\0\11\16\2\0\1\16\3\0\1\16\1\u01d3\22\16"+
    "\20\0\1\16\6\0\2\16\1\0\11\16\2\0\1\16"+
    "\3\0\16\16\1\u01d4\5\16\20\0\1\16\6\0\2\16"+
    "\1\0\1\16\1\u01d5\7\16\2\0\1\16\3\0\24\16"+
    "\20\0\1\16\6\0\2\16\1\0\11\16\2\0\1\16"+
    "\3\0\7\16\1\u01d6\1\u01d7\1\u01d8\12\16\20\0\1\16"+
    "\6\0\2\16\1\0\11\16\2\0\1\16\3\0\3\16"+
    "\1\u01d9\20\16\20\0\1\16\6\0\2\16\1\0\11\16"+
    "\2\0\1\16\3\0\5\16\1\u01da\16\16\20\0\1\16"+
    "\6\0\2\16\1\0\10\16\1\u01db\2\0\1\16\3\0"+
    "\24\16\20\0\1\16\6\0\2\16\1\0\3\16\1\u01dc"+
    "\5\16\2\0\1\16\3\0\24\16\20\0\1\16\6\0"+
    "\2\16\1\0\4\16\1\u01dd\4\16\2\0\1\16\3\0"+
    "\24\16\20\0\1\16\6\0\2\16\1\0\10\16\1\u01de"+
    "\2\0\1\16\3\0\24\16\20\0\1\16\6\0\2\16"+
    "\1\0\10\16\1\u01df\2\0\1\16\3\0\24\16\20\0"+
    "\1\16\6\0\2\16\1\0\10\16\1\u01e0\2\0\1\16"+
    "\3\0\24\16\20\0\1\16\6\0\2\16\1\0\10\16"+
    "\1\u01e1\2\0\1\16\3\0\24\16\20\0\1\16\6\0"+
    "\2\16\1\0\4\16\1\u01e2\4\16\2\0\1\16\3\0"+
    "\24\16\20\0\1\16\6\0\2\73\1\0\2\73\1\u01e3"+
    "\6\73\2\0\1\73\3\0\24\73\20\0\1\73\6\0"+
    "\2\73\1\0\2\73\1\u01e4\6\73\2\0\1\73\3\0"+
    "\24\73\20\0\1\73\6\0\2\73\1\0\2\73\1\u01e5"+
    "\6\73\2\0\1\73\3\0\24\73\20\0\1\73\6\0"+
    "\2\73\1\0\10\73\1\u01e6\2\0\1\73\3\0\24\73"+
    "\20\0\1\73\6\0\2\73\1\0\1\73\1\u01e7\7\73"+
    "\2\0\1\73\3\0\24\73\20\0\1\73\6\0\2\73"+
    "\1\0\2\73\1\u01e8\6\73\2\0\1\73\3\0\24\73"+
    "\20\0\1\73\6\0\2\73\1\0\11\73\2\0\1\73"+
    "\3\0\1\73\1\u01e9\22\73\20\0\1\73\6\0\2\73"+
    "\1\0\11\73\2\0\1\73\3\0\1\u01ea\23\73\20\0"+
    "\1\73\6\0\2\73\1\0\11\73\2\0\1\73\3\0"+
    "\16\73\1\u01eb\5\73\20\0\1\73\6\0\2\73\1\0"+
    "\1\73\1\u01ec\7\73\2\0\1\73\3\0\24\73\20\0"+
    "\1\73\6\0\2\73\1\0\11\73\2\0\1\73\3\0"+
    "\7\73\1\u01ed\1\u01ee\1\u01ef\12\73\20\0\1\73\6\0"+
    "\2\73\1\0\11\73\2\0\1\73\3\0\3\73\1\u01f0"+
    "\20\73\20\0\1\73\6\0\2\73\1\0\11\73\2\0"+
    "\1\73\3\0\5\73\1\u01f1\16\73\20\0\1\73\6\0"+
    "\2\73\1\0\11\73\2\0\1\73\3\0\1\u01f2\23\73"+
    "\20\0\1\73\6\0\2\73\1\0\10\73\1\u01f3\2\0"+
    "\1\73\3\0\24\73\20\0\1\73\6\0\2\73\1\0"+
    "\3\73\1\u01f4\5\73\2\0\1\73\3\0\24\73\20\0"+
    "\1\73\6\0\2\73\1\0\4\73\1\u01f5\4\73\2\0"+
    "\1\73\3\0\24\73\20\0\1\73\6\0\2\73\1\0"+
    "\10\73\1\u01f6\2\0\1\73\3\0\24\73\20\0\1\73"+
    "\6\0\2\73\1\0\10\73\1\u01f7\2\0\1\73\3\0"+
    "\24\73\20\0\1\73\6\0\2\73\1\0\10\73\1\u01f8"+
    "\2\0\1\73\3\0\24\73\20\0\1\73\6\0\2\73"+
    "\1\0\10\73\1\u01f9\2\0\1\73\3\0\24\73\20\0"+
    "\1\73\6\0\2\73\1\0\4\73\1\u01fa\4\73\2\0"+
    "\1\73\3\0\24\73\20\0\1\73\6\0\2\16\1\0"+
    "\5\16\1\u01fb\3\16\2\0\1\16\3\0\24\16\20\0"+
    "\1\16\6\0\2\16\1\0\5\16\1\u01fc\3\16\2\0"+
    "\1\16\3\0\24\16\20\0\1\16\6\0\2\16\1\0"+
    "\5\16\1\u01fd\3\16\2\0\1\16\3\0\24\16\20\0"+
    "\1\16\6\0\2\16\1\0\11\16\2\0\1\16\3\0"+
    "\1\u01fe\23\16\20\0\1\16\6\0\2\16\1\0\1\16"+
    "\1\u01ff\7\16\2\0\1\16\3\0\24\16\20\0\1\16"+
    "\6\0\2\16\1\0\5\16\1\u0200\3\16\2\0\1\16"+
    "\3\0\24\16\20\0\1\16\6\0\2\16\1\0\11\16"+
    "\2\0\1\16\3\0\1\16\1\u0201\22\16\20\0\1\16"+
    "\6\0\2\16\1\0\4\16\1\u0202\4\16\2\0\1\16"+
    "\3\0\24\16\20\0\1\16\6\0\2\16\1\0\4\16"+
    "\1\u0203\1\u0204\3\16\2\0\1\16\3\0\24\16\20\0"+
    "\1\16\6\0\2\16\1\0\3\16\1\u0205\5\16\2\0"+
    "\1\16\3\0\24\16\20\0\1\16\6\0\2\16\1\0"+
    "\7\16\1\u0206\1\16\2\0\1\16\3\0\24\16\20\0"+
    "\1\16\6\0\2\73\1\0\5\73\1\u0207\3\73\2\0"+
    "\1\73\3\0\24\73\20\0\1\73\6\0\2\73\1\0"+
    "\5\73\1\u0208\3\73\2\0\1\73\3\0\24\73\20\0"+
    "\1\73\6\0\2\73\1\0\11\73\2\0\1\73\3\0"+
    "\1\73\1\u0209\22\73\20\0\1\73\6\0\2\73\1\0"+
    "\5\73\1\u020a\3\73\2\0\1\73\3\0\24\73\20\0"+
    "\1\73\6\0\2\73\1\0\11\73\2\0\1\73\3\0"+
    "\1\u020b\23\73\20\0\1\73\6\0\2\73\1\0\1\73"+
    "\1\u020c\7\73\2\0\1\73\3\0\24\73\20\0\1\73"+
    "\6\0\2\73\1\0\5\73\1\u020d\3\73\2\0\1\73"+
    "\3\0\24\73\20\0\1\73\6\0\2\73\1\0\11\73"+
    "\2\0\1\73\3\0\1\73\1\u020e\22\73\20\0\1\73"+
    "\6\0\2\73\1\0\4\73\1\u020f\4\73\2\0\1\73"+
    "\3\0\24\73\20\0\1\73\6\0\2\73\1\0\11\73"+
    "\2\0\1\73\3\0\1\73\1\u0210\22\73\20\0\1\73"+
    "\6\0\2\73\1\0\4\73\1\u0211\1\u0212\3\73\2\0"+
    "\1\73\3\0\24\73\20\0\1\73\6\0\2\73\1\0"+
    "\3\73\1\u0213\5\73\2\0\1\73\3\0\24\73\20\0"+
    "\1\73\6\0\2\73\1\0\7\73\1\u0214\1\73\2\0"+
    "\1\73\3\0\24\73\20\0\1\73\6\0\2\16\1\0"+
    "\2\16\1\u0215\6\16\2\0\1\16\3\0\24\16\20\0"+
    "\1\16\6\0\2\16\1\0\11\16\2\0\1\16\3\0"+
    "\1\16\1\u0216\22\16\20\0\1\16\6\0\2\16\1\0"+
    "\4\16\1\u0217\4\16\2\0\1\16\3\0\24\16\20\0"+
    "\1\16\6\0\2\16\1\0\7\16\1\u0218\1\16\2\0"+
    "\1\16\3\0\24\16\20\0\1\16\6\0\2\16\1\0"+
    "\5\16\1\u0219\3\16\2\0\1\16\3\0\24\16\20\0"+
    "\1\16\6\0\2\16\1\0\2\16\1\u021a\6\16\2\0"+
    "\1\16\3\0\24\16\20\0\1\16\6\0\2\16\1\0"+
    "\10\16\1\u021b\2\0\1\16\3\0\24\16\20\0\1\16"+
    "\6\0\2\16\1\0\10\16\1\u021c\2\0\1\16\3\0"+
    "\24\16\20\0\1\16\6\0\2\16\1\0\1\16\1\u021d"+
    "\7\16\2\0\1\16\3\0\24\16\20\0\1\16\6\0"+
    "\2\73\1\0\2\73\1\u021e\6\73\2\0\1\73\3\0"+
    "\24\73\20\0\1\73\6\0\2\73\1\0\4\73\1\u021f"+
    "\4\73\2\0\1\73\3\0\24\73\20\0\1\73\6\0"+
    "\2\73\1\0\11\73\2\0\1\73\3\0\1\73\1\u0220"+
    "\22\73\20\0\1\73\6\0\2\73\1\0\4\73\1\u0221"+
    "\4\73\2\0\1\73\3\0\24\73\20\0\1\73\6\0"+
    "\2\73\1\0\7\73\1\u0222\1\73\2\0\1\73\3\0"+
    "\24\73\20\0\1\73\6\0\2\73\1\0\5\73\1\u0223"+
    "\3\73\2\0\1\73\3\0\24\73\20\0\1\73\6\0"+
    "\2\73\1\0\2\73\1\u0224\6\73\2\0\1\73\3\0"+
    "\24\73\20\0\1\73\6\0\2\73\1\0\4\73\1\u0225"+
    "\4\73\2\0\1\73\3\0\24\73\20\0\1\73\6\0"+
    "\2\73\1\0\10\73\1\u0226\2\0\1\73\3\0\24\73"+
    "\20\0\1\73\6\0\2\73\1\0\10\73\1\u0227\2\0"+
    "\1\73\3\0\24\73\20\0\1\73\6\0\2\73\1\0"+
    "\1\73\1\u0228\7\73\2\0\1\73\3\0\24\73\20\0"+
    "\1\73\6\0\2\16\1\0\1\16\1\u0229\7\16\2\0"+
    "\1\16\3\0\24\16\20\0\1\16\6\0\2\16\1\0"+
    "\7\16\1\u022a\1\16\2\0\1\16\3\0\24\16\20\0"+
    "\1\16\6\0\2\16\1\0\1\16\1\u022b\7\16\2\0"+
    "\1\16\3\0\24\16\20\0\1\16\6\0\2\16\1\0"+
    "\2\16\1\u022c\6\16\2\0\1\16\3\0\24\16\20\0"+
    "\1\16\6\0\2\16\1\0\10\16\1\u022d\2\0\1\16"+
    "\3\0\24\16\20\0\1\16\6\0\2\73\1\0\2\73"+
    "\1\u022e\6\73\2\0\1\73\3\0\24\73\20\0\1\73"+
    "\6\0\2\73\1\0\1\73\1\u022f\7\73\2\0\1\73"+
    "\3\0\24\73\20\0\1\73\6\0\2\73\1\0\7\73"+
    "\1\u0230\1\73\2\0\1\73\3\0\24\73\20\0\1\73"+
    "\6\0\2\73\1\0\1\73\1\u0231\7\73\2\0\1\73"+
    "\3\0\24\73\20\0\1\73\6\0\2\73\1\0\2\73"+
    "\1\u0232\6\73\2\0\1\73\3\0\24\73\20\0\1\73"+
    "\6\0\2\73\1\0\2\73\1\u0233\6\73\2\0\1\73"+
    "\3\0\24\73\20\0\1\73\6\0\2\73\1\0\10\73"+
    "\1\u0234\2\0\1\73\3\0\24\73\20\0\1\73\6\0"+
    "\2\16\1\0\2\16\1\u0235\6\16\2\0\1\16\3\0"+
    "\24\16\20\0\1\16\6\0\2\16\1\0\4\16\1\u0236"+
    "\4\16\2\0\1\16\3\0\24\16\20\0\1\16\6\0"+
    "\2\73\1\0\2\73\1\u0237\6\73\2\0\1\73\3\0"+
    "\24\73\20\0\1\73\6\0\2\73\1\0\4\73\1\u0238"+
    "\4\73\2\0\1\73\3\0\24\73\20\0\1\73\6\0"+
    "\2\16\1\0\5\16\1\u0239\3\16\2\0\1\16\3\0"+
    "\24\16\20\0\1\16\6\0\2\16\1\0\11\16\2\0"+
    "\1\16\3\0\1\u023a\23\16\20\0\1\16\6\0\2\73"+
    "\1\0\5\73\1\u023b\3\73\2\0\1\73\3\0\24\73"+
    "\20\0\1\73\6\0\2\73\1\0\11\73\2\0\1\73"+
    "\3\0\1\u023c\23\73\20\0\1\73\6\0\2\16\1\0"+
    "\5\16\1\u023d\3\16\2\0\1\16\3\0\24\16\20\0"+
    "\1\16\6\0\2\73\1\0\5\73\1\u023e\3\73\2\0"+
    "\1\73\3\0\24\73\20\0\1\73\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27023];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\3\1\1\11\12\1\1\11"+
    "\13\1\1\11\3\1\15\11\1\1\1\11\3\1\1\11"+
    "\12\1\1\11\13\1\1\11\3\1\15\11\1\1\1\0"+
    "\15\1\1\0\1\11\1\1\1\0\20\1\2\11\1\1"+
    "\1\0\15\1\1\0\1\11\20\1\1\11\1\0\1\11"+
    "\17\1\1\11\1\0\21\1\1\0\1\11\150\1\1\0"+
    "\33\1\1\0\357\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[574];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
        String mensaje;
        private token tmp;
        private void comprobacionEspacios(){
                if(token.contadorLocal==(token.contadorGlobal+1)){
                        token.contadorGlobal +=1;
                }else if(token.contadorLocal < token.contadorGlobal){
                      token.contadorGlobal = token.contadorLocal;
                }else if(token.contadorLocal  == token.contadorGlobal){

                }else{
                        mensaje = "Error de tabulacion en:\ncol: "+ yycolumn+" || linea: "+yyline+"\n";
                       cargar_archivo.escribirNotificacion(mensaje, 1);
                }
        }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLexico(java.io.Reader in) {
          
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 194) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {         mensaje = "Finalizacion de analisis lexico\n";
        cargar_archivo.escribirNotificacion(mensaje, 0);
        //return 1;
        return new Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 140: break;
          case 2: 
            { token.contadorLocal=0;
                                //cargar_archivo.escribirToken("Finlinea ignorada");
            } 
            // fall through
          case 141: break;
          case 3: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal, 1);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.ENTERO, tmp);
            } 
            // fall through
          case 142: break;
          case 4: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.PUNTO, tmp);
            } 
            // fall through
          case 143: break;
          case 5: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.ID, tmp);
            } 
            // fall through
          case 144: break;
          case 6: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.DIVISION, tmp);
            } 
            // fall through
          case 145: break;
          case 7: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.MULTI, tmp);
            } 
            // fall through
          case 146: break;
          case 8: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.COMPARACION, tmp);
            } 
            // fall through
          case 147: break;
          case 9: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.IGUAL, tmp);
            } 
            // fall through
          case 148: break;
          case 10: 
            { cargar_archivo.escribirToken("finlinea" + "estado2");
            } 
            // fall through
          case 149: break;
          case 11: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.DOSPUNTOS, tmp);
            } 
            // fall through
          case 150: break;
          case 12: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.SUMA, tmp);
            } 
            // fall through
          case 151: break;
          case 13: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.RESTA, tmp);
            } 
            // fall through
          case 152: break;
          case 14: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.APARENTESIS, tmp);
            } 
            // fall through
          case 153: break;
          case 15: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.CPARENTESIS, tmp);
            } 
            // fall through
          case 154: break;
          case 16: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.PORCENTAJE, tmp);
            } 
            // fall through
          case 155: break;
          case 17: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.COMA, tmp);
            } 
            // fall through
          case 156: break;
          case 18: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.ACORCHETEC, tmp);
            } 
            // fall through
          case 157: break;
          case 19: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.CCORCHETEC, tmp);
            } 
            // fall through
          case 158: break;
          case 20: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.ACORCHETE, tmp);
            } 
            // fall through
          case 159: break;
          case 21: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.CCORCHETE, tmp);
            } 
            // fall through
          case 160: break;
          case 22: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.POTENCIA, tmp);
            } 
            // fall through
          case 161: break;
          case 23: 
            { System.out.print(yytext());
            } 
            // fall through
          case 162: break;
          case 24: 
            { tmp = new token(yycolumn, yyline, "FINLINEA", token.contadorLocal);
                                token.contadorLocal=0;
                                yybegin(YYINITIAL);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.FINLINEA, tmp);
            } 
            // fall through
          case 163: break;
          case 25: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal, 1);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.ENTERO, tmp);
            } 
            // fall through
          case 164: break;
          case 26: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.PUNTO, tmp);
            } 
            // fall through
          case 165: break;
          case 27: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.ID, tmp);
            } 
            // fall through
          case 166: break;
          case 28: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.DIVISION, tmp);
            } 
            // fall through
          case 167: break;
          case 29: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.MULTI, tmp);
            } 
            // fall through
          case 168: break;
          case 30: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.COMPARACION, tmp);
            } 
            // fall through
          case 169: break;
          case 31: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.IGUAL, tmp);
            } 
            // fall through
          case 170: break;
          case 32: 
            { tmp = new token(yycolumn, yyline, "FINLINEA", token.contadorLocal);
                                        token.contadorLocal = 0;
                                        yybegin(YYINITIAL);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.FINLINEA, tmp);
            } 
            // fall through
          case 171: break;
          case 33: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.DOSPUNTOS, tmp);
            } 
            // fall through
          case 172: break;
          case 34: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.SUMA, tmp);
            } 
            // fall through
          case 173: break;
          case 35: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.RESTA, tmp);
            } 
            // fall through
          case 174: break;
          case 36: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.APARENTESIS, tmp);
            } 
            // fall through
          case 175: break;
          case 37: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.CPARENTESIS, tmp);
            } 
            // fall through
          case 176: break;
          case 38: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.PORCENTAJE, tmp);
            } 
            // fall through
          case 177: break;
          case 39: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.COMA, tmp);
            } 
            // fall through
          case 178: break;
          case 40: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.ACORCHETEC, tmp);
            } 
            // fall through
          case 179: break;
          case 41: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.CCORCHETEC, tmp);
            } 
            // fall through
          case 180: break;
          case 42: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.ACORCHETE, tmp);
            } 
            // fall through
          case 181: break;
          case 43: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.CCORCHETE, tmp);
            } 
            // fall through
          case 182: break;
          case 44: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.POTENCIA, tmp);
            } 
            // fall through
          case 183: break;
          case 45: 
            { //System.out.println("Espacio Blanco");
            } 
            // fall through
          case 184: break;
          case 46: 
            { token.contadorLocal+=1;
                                //cargar_archivo.escribirToken("Tabulador: "+token.contadorLocal);
            } 
            // fall through
          case 185: break;
          case 47: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.SI, tmp);
            } 
            // fall through
          case 186: break;
          case 48: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.STRING, tmp);
            } 
            // fall through
          case 187: break;
          case 49: 
            { //System.out.println("Comentario: " + yytext());
            } 
            // fall through
          case 188: break;
          case 50: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.OR, tmp);
            } 
            // fall through
          case 189: break;
          case 51: 
            { //cargar_archivo.escribirToken("Espacio Blanco");
            } 
            // fall through
          case 190: break;
          case 52: 
            { //cargar_archivo.escribirToken("Tabulador: "+token.contadorLocal);
                                        //System.out.println("tabulador"+ "estado1");
            } 
            // fall through
          case 191: break;
          case 53: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.SI, tmp);
            } 
            // fall through
          case 192: break;
          case 54: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.STRING, tmp);
            } 
            // fall through
          case 193: break;
          case 55: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.OR, tmp);
            } 
            // fall through
          case 194: break;
          case 56: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal, 1);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.REAL, tmp);
            } 
            // fall through
          case 195: break;
          case 57: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.AND, tmp);
            } 
            // fall through
          case 196: break;
          case 58: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal, 1);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.REAL, tmp);
            } 
            // fall through
          case 197: break;
          case 59: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.AND, tmp);
            } 
            // fall through
          case 198: break;
          case 60: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.RREAL, tmp);
            } 
            // fall through
          case 199: break;
          case 61: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.RAIZ, tmp);
            } 
            // fall through
          case 200: break;
          case 62: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.LEER, tmp);
            } 
            // fall through
          case 201: break;
          case 63: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.SENO, tmp);
            } 
            // fall through
          case 202: break;
          case 64: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.SINO, tmp);
            } 
            // fall through
          case 203: break;
          case 65: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.NULO, tmp);
            } 
            // fall through
          case 204: break;
          case 66: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.RREAL, tmp);
            } 
            // fall through
          case 205: break;
          case 67: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.RAIZ, tmp);
            } 
            // fall through
          case 206: break;
          case 68: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.LEER, tmp);
            } 
            // fall through
          case 207: break;
          case 69: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.SENO, tmp);
            } 
            // fall through
          case 208: break;
          case 70: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.SINO, tmp);
            } 
            // fall through
          case 209: break;
          case 71: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.NULO, tmp);
            } 
            // fall through
          case 210: break;
          case 72: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.DESDE, tmp);
            } 
            // fall through
          case 211: break;
          case 73: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal, 2);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.FALSO, tmp);
            } 
            // fall through
          case 212: break;
          case 74: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.CLASE, tmp);
            } 
            // fall through
          case 213: break;
          case 75: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.HACER, tmp);
            } 
            // fall through
          case 214: break;
          case 76: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.DESDE, tmp);
            } 
            // fall through
          case 215: break;
          case 77: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal, 2);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.FALSO, tmp);
            } 
            // fall through
          case 216: break;
          case 78: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.CLASE, tmp);
            } 
            // fall through
          case 217: break;
          case 79: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.HACER, tmp);
            } 
            // fall through
          case 218: break;
          case 80: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.RENTERO, tmp);
            } 
            // fall through
          case 219: break;
          case 81: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.CADENA, tmp);
            } 
            // fall through
          case 220: break;
          case 82: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.COSENO, tmp);
            } 
            // fall through
          case 221: break;
          case 83: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.RENTERO, tmp);
            } 
            // fall through
          case 222: break;
          case 84: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.CADENA, tmp);
            } 
            // fall through
          case 223: break;
          case 85: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.COSENO, tmp);
            } 
            // fall through
          case 224: break;
          case 86: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.BOLEANO, tmp);
            } 
            // fall through
          case 225: break;
          case 87: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.INCLUIR, tmp);
            } 
            // fall through
          case 226: break;
          case 88: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.METODOS, tmp);
            } 
            // fall through
          case 227: break;
          case 89: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.BOLEANO, tmp);
            } 
            // fall through
          case 228: break;
          case 90: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.INCLUIR, tmp);
            } 
            // fall through
          case 229: break;
          case 91: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.METODOS, tmp);
            } 
            // fall through
          case 230: break;
          case 92: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.ELIMINAR, tmp);
            } 
            // fall through
          case 231: break;
          case 93: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.ESCRIBIR, tmp);
            } 
            // fall through
          case 232: break;
          case 94: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.ENTONCES, tmp);
            } 
            // fall through
          case 233: break;
          case 95: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.EXTIENDE, tmp);
            } 
            // fall through
          case 234: break;
          case 96: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.DEVOLVER, tmp);
            } 
            // fall through
          case 235: break;
          case 97: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.TANGENTE, tmp);
            } 
            // fall through
          case 236: break;
          case 98: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.MIENTRAS, tmp);
            } 
            // fall through
          case 237: break;
          case 99: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.PRIVADAS, tmp);
            } 
            // fall through
          case 238: break;
          case 100: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.PRIVADO, tmp);
            } 
            // fall through
          case 239: break;
          case 101: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.PUBLICA, tmp);
            } 
            // fall through
          case 240: break;
          case 102: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.PUBLICO, tmp);
            } 
            // fall through
          case 241: break;
          case 103: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.ELIMINAR, tmp);
            } 
            // fall through
          case 242: break;
          case 104: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.ESCRIBIR, tmp);
            } 
            // fall through
          case 243: break;
          case 105: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.ENTONCES, tmp);
            } 
            // fall through
          case 244: break;
          case 106: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.EXTIENDE, tmp);
            } 
            // fall through
          case 245: break;
          case 107: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.DEVOLVER, tmp);
            } 
            // fall through
          case 246: break;
          case 108: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.TANGENTE, tmp);
            } 
            // fall through
          case 247: break;
          case 109: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.MIENTRAS, tmp);
            } 
            // fall through
          case 248: break;
          case 110: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());

                                        return new Symbol(sym.PRIVADAS, tmp);
            } 
            // fall through
          case 249: break;
          case 111: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.PRIVADO, tmp);
            } 
            // fall through
          case 250: break;
          case 112: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.PUBLICA, tmp);
            } 
            // fall through
          case 251: break;
          case 113: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.PUBLICO, tmp);
            } 
            // fall through
          case 252: break;
          case 114: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal, 2);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.VERDADERO, tmp);
            } 
            // fall through
          case 253: break;
          case 115: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.LOG, tmp);
            } 
            // fall through
          case 254: break;
          case 116: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.PRINCIPAL, tmp);
            } 
            // fall through
          case 255: break;
          case 117: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal, 2);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.VERDADERO, tmp);
            } 
            // fall through
          case 256: break;
          case 118: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.LOG, tmp);
            } 
            // fall through
          case 257: break;
          case 119: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.PRINCIPAL, tmp);
            } 
            // fall through
          case 258: break;
          case 120: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                return new Symbol(sym.DESTRUCTOR, tmp);
            } 
            // fall through
          case 259: break;
          case 121: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.INSTANCIAR, tmp);
            } 
            // fall through
          case 260: break;
          case 122: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.PROTEGIDAS, tmp);
            } 
            // fall through
          case 261: break;
          case 123: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.PROTEGIDO, tmp);
            } 
            // fall through
          case 262: break;
          case 124: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                        return new Symbol(sym.DESTRUCTOR, tmp);
            } 
            // fall through
          case 263: break;
          case 125: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.INSTANCIAR, tmp);
            } 
            // fall through
          case 264: break;
          case 126: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.PROTEGIDAS, tmp);
            } 
            // fall through
          case 265: break;
          case 127: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.PROTEGIDO, tmp);
            } 
            // fall through
          case 266: break;
          case 128: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.CADENAREAL, tmp);
            } 
            // fall through
          case 267: break;
          case 129: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.CONSTRUCTOR, tmp);
            } 
            // fall through
          case 268: break;
          case 130: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.PROPIEDADES, tmp);
            } 
            // fall through
          case 269: break;
          case 131: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.DECREMENTAR, tmp);
            } 
            // fall through
          case 270: break;
          case 132: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.CADENAREAL, tmp);
            } 
            // fall through
          case 271: break;
          case 133: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.CONSTRUCTOR, tmp);
            } 
            // fall through
          case 272: break;
          case 134: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.INCREMENTAR, tmp);
            } 
            // fall through
          case 273: break;
          case 135: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.PROPIEDADES, tmp);
            } 
            // fall through
          case 274: break;
          case 136: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.CADENAENTERO, tmp);
            } 
            // fall through
          case 275: break;
          case 137: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.CADENAENTERO, tmp);
            } 
            // fall through
          case 276: break;
          case 138: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.CADENABOLEANO, tmp);
            } 
            // fall through
          case 277: break;
          case 139: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.CADENABOLEANO, tmp);
            } 
            // fall through
          case 278: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexico [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorLexico scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorLexico(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
