/* The following code was generated by JFlex 1.7.0 */

package kurokitsune.main;
import java_cup.runtime.Symbol;
import informacion.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/main/java/tools/reglasLoop.jflex</tt>
 */
class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int estado1 = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\2\1\74\1\75\1\1\22\0\1\3\1\54\1\21\2\0"+
    "\1\63\1\0\1\24\1\61\1\62\1\25\1\57\1\64\1\60\1\6"+
    "\1\23\1\4\11\5\1\56\1\55\1\52\1\53\1\52\2\0\1\34"+
    "\1\37\1\22\1\41\1\35\10\22\1\40\1\42\1\50\1\22\1\36"+
    "\10\22\1\65\1\0\1\66\1\71\1\73\1\0\1\13\1\30\1\31"+
    "\1\12\1\10\1\15\1\43\1\46\1\33\2\22\1\16\1\44\1\26"+
    "\1\14\1\47\1\22\1\11\1\17\1\27\1\32\1\7\1\22\1\51"+
    "\1\22\1\45\1\67\1\20\1\70\7\0\1\74\u1fa2\0\1\74\1\74"+
    "\udfd3\0\1\72\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\22\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\1\2\3\1\4\10\5\1\1"+
    "\1\6\1\7\13\5\1\10\1\11\1\1\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\5\1\27\2\30\1\1\2\31"+
    "\1\32\10\33\1\1\1\34\1\35\13\33\1\36\1\37"+
    "\1\1\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\33\1\55"+
    "\1\56\1\0\1\5\1\3\14\0\1\57\1\0\1\60"+
    "\1\61\11\0\1\62\6\0\2\12\1\5\1\63\1\64"+
    "\1\0\1\33\1\31\14\0\1\65\1\0\1\66\10\0"+
    "\1\67\6\0\2\40\1\33\1\0\2\70\16\0\1\61"+
    "\12\0\1\71\7\0\1\5\2\0\2\72\27\0\1\73"+
    "\7\0\1\33\1\0\1\56\6\0\1\74\1\75\4\0"+
    "\1\76\1\0\1\77\1\100\1\61\1\101\20\0\1\64"+
    "\6\0\1\102\1\103\4\0\1\104\1\0\1\105\1\106"+
    "\1\107\30\0\1\110\1\0\1\111\6\0\1\112\4\0"+
    "\1\113\15\0\1\114\1\0\1\115\6\0\1\116\4\0"+
    "\1\117\10\0\1\120\7\0\1\121\1\122\15\0\1\123"+
    "\7\0\1\124\1\125\23\0\1\126\3\0\1\127\1\130"+
    "\21\0\1\131\3\0\1\132\1\133\11\0\1\134\1\135"+
    "\1\136\1\137\1\140\2\0\1\141\5\0\1\142\2\0"+
    "\1\143\1\144\1\145\1\146\2\0\1\147\1\150\1\151"+
    "\1\152\1\153\2\0\1\154\5\0\1\155\2\0\1\156"+
    "\1\157\1\160\1\161\1\0\1\162\1\0\1\163\10\0"+
    "\1\164\1\165\1\0\1\166\10\0\1\167\1\170\4\0"+
    "\1\171\1\172\1\173\1\0\1\174\4\0\1\175\1\176"+
    "\1\177\2\0\1\200\1\0\1\201\1\202\1\0\1\203"+
    "\1\0\1\204\1\205\4\0\1\206\1\0\1\207\1\0"+
    "\1\210\1\211";

  private static int [] zzUnpackAction() {
    int [] result = new int[569];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\174\0\370\0\u0136\0\u0174"+
    "\0\174\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326"+
    "\0\u0364\0\u03a2\0\u03e0\0\174\0\u041e\0\u045c\0\u049a\0\u04d8"+
    "\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\174"+
    "\0\u06c8\0\u06c8\0\u0706\0\174\0\174\0\174\0\174\0\174"+
    "\0\174\0\174\0\174\0\174\0\174\0\174\0\174\0\u0744"+
    "\0\174\0\u0782\0\174\0\u07c0\0\u07fe\0\u083c\0\174\0\u087a"+
    "\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a"+
    "\0\u03e0\0\174\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde"+
    "\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\174\0\u0d52\0\u0d52"+
    "\0\u0d90\0\174\0\174\0\174\0\174\0\174\0\174\0\174"+
    "\0\174\0\174\0\174\0\174\0\174\0\u0dce\0\174\0\u0e0c"+
    "\0\u0e4a\0\174\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe"+
    "\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae"+
    "\0\u03a2\0\174\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322"+
    "\0\u1360\0\u139e\0\u13dc\0\u141a\0\174\0\u1458\0\u1496\0\u14d4"+
    "\0\u1512\0\u1550\0\u158e\0\u15cc\0\174\0\u160a\0\174\0\u1648"+
    "\0\u1686\0\174\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa"+
    "\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea"+
    "\0\u0a6a\0\174\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e"+
    "\0\u1b9c\0\u1bda\0\174\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10"+
    "\0\u1d4e\0\u1d8c\0\174\0\u1dca\0\u1e08\0\174\0\u1e46\0\u1e84"+
    "\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074"+
    "\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa\0\174\0\u21e8\0\u2226"+
    "\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416"+
    "\0\174\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8"+
    "\0\u2606\0\u2644\0\u2682\0\174\0\u26c0\0\u26fe\0\u273c\0\u277a"+
    "\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a"+
    "\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a"+
    "\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\174\0\u2c90\0\u2cce\0\u2d0c"+
    "\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc"+
    "\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4\0\u3032\0\174\0\174\0\u3070"+
    "\0\u30ae\0\u30ec\0\u312a\0\174\0\u3168\0\174\0\174\0\u31a6"+
    "\0\174\0\u31e4\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a\0\u3358"+
    "\0\u3396\0\u33d4\0\u3412\0\u3450\0\u348e\0\u34cc\0\u350a\0\u3548"+
    "\0\u3586\0\u35c4\0\u3602\0\u3640\0\u367e\0\u36bc\0\u36fa\0\u3738"+
    "\0\174\0\174\0\u3776\0\u37b4\0\u37f2\0\u3830\0\174\0\u386e"+
    "\0\174\0\174\0\174\0\u38ac\0\u38ea\0\u3928\0\u3966\0\u39a4"+
    "\0\u39e2\0\u3a20\0\u3a5e\0\u3a9c\0\u3ada\0\u3b18\0\u3b56\0\u3b94"+
    "\0\u3bd2\0\u3c10\0\u3c4e\0\u2ebe\0\u3c8c\0\u3cca\0\u3d08\0\u3d46"+
    "\0\u3d84\0\u3dc2\0\u3e00\0\174\0\u3e3e\0\174\0\u3e7c\0\u3eba"+
    "\0\u3ef8\0\u3f36\0\u3f74\0\u3fb2\0\174\0\u3ff0\0\u402e\0\u406c"+
    "\0\u40aa\0\174\0\u40e8\0\u4126\0\u4164\0\u41a2\0\u41e0\0\u35c4"+
    "\0\u421e\0\u425c\0\u429a\0\u42d8\0\u4316\0\u4354\0\u4392\0\174"+
    "\0\u43d0\0\174\0\u440e\0\u444c\0\u448a\0\u44c8\0\u4506\0\u4544"+
    "\0\174\0\u4582\0\u45c0\0\u45fe\0\u463c\0\174\0\u467a\0\u46b8"+
    "\0\u46f6\0\u4734\0\u4772\0\u47b0\0\u47ee\0\u482c\0\174\0\u486a"+
    "\0\u48a8\0\u48e6\0\u4924\0\u4962\0\u49a0\0\u49de\0\u4a1c\0\174"+
    "\0\u4a5a\0\u4a98\0\u4ad6\0\u4b14\0\u4b52\0\u4b90\0\u4bce\0\u4c0c"+
    "\0\u4c4a\0\u4c88\0\u4cc6\0\u4d04\0\u4d42\0\174\0\u4d80\0\u4dbe"+
    "\0\u4dfc\0\u4e3a\0\u4e78\0\u4eb6\0\u4ef4\0\u4f32\0\174\0\u4f70"+
    "\0\u4fae\0\u4fec\0\u502a\0\u5068\0\u50a6\0\u50e4\0\u5122\0\u5160"+
    "\0\u519e\0\u51dc\0\u521a\0\u5258\0\u5296\0\u52d4\0\u5312\0\u5350"+
    "\0\u538e\0\u53cc\0\174\0\u540a\0\u5448\0\u5486\0\174\0\174"+
    "\0\u54c4\0\u5502\0\u5540\0\u557e\0\u55bc\0\u55fa\0\u5638\0\u5676"+
    "\0\u56b4\0\u56f2\0\u5730\0\u576e\0\u57ac\0\u57ea\0\u5828\0\u5866"+
    "\0\u58a4\0\174\0\u58e2\0\u5920\0\u595e\0\174\0\174\0\u599c"+
    "\0\u59da\0\u5a18\0\u5a56\0\u5a94\0\u5ad2\0\u5b10\0\u5b4e\0\u5b8c"+
    "\0\174\0\174\0\174\0\174\0\174\0\u5bca\0\u5c08\0\174"+
    "\0\u5c46\0\u5c84\0\u5cc2\0\u5d00\0\u5d3e\0\174\0\u5d7c\0\u5dba"+
    "\0\174\0\174\0\174\0\174\0\u5df8\0\u5e36\0\174\0\174"+
    "\0\174\0\174\0\174\0\u5e74\0\u5eb2\0\174\0\u5ef0\0\u5f2e"+
    "\0\u5f6c\0\u5faa\0\u5fe8\0\174\0\u6026\0\u6064\0\174\0\174"+
    "\0\174\0\174\0\u60a2\0\174\0\u60e0\0\174\0\u611e\0\u615c"+
    "\0\u619a\0\u61d8\0\u6216\0\u6254\0\u6292\0\u62d0\0\174\0\174"+
    "\0\u630e\0\174\0\u634c\0\u638a\0\u63c8\0\u6406\0\u6444\0\u6482"+
    "\0\u64c0\0\u64fe\0\174\0\174\0\u653c\0\u657a\0\u65b8\0\u65f6"+
    "\0\174\0\174\0\174\0\u6634\0\174\0\u6672\0\u66b0\0\u66ee"+
    "\0\u672c\0\174\0\174\0\174\0\u676a\0\u67a8\0\174\0\u67e6"+
    "\0\174\0\174\0\u6824\0\174\0\u6862\0\174\0\174\0\u68a0"+
    "\0\u68de\0\u691c\0\u695a\0\174\0\u6998\0\174\0\u69d6\0\174"+
    "\0\174";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[569];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\2\16\1\17\1\20\1\21\1\16"+
    "\1\22\1\16\1\23\1\3\1\24\1\25\1\26\1\27"+
    "\1\30\1\16\1\31\1\32\5\16\1\33\1\16\1\34"+
    "\1\16\1\35\1\36\1\37\1\16\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\3\2\61"+
    "\1\3\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\2\74\1\75\1\76\1\77\1\74"+
    "\1\100\1\74\1\101\1\3\1\102\1\103\1\104\1\105"+
    "\1\106\1\74\1\107\1\110\5\74\1\111\1\74\1\112"+
    "\1\74\1\113\1\114\1\115\1\74\1\116\1\117\1\120"+
    "\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130"+
    "\1\131\1\132\1\133\1\134\1\135\1\136\1\3\2\61"+
    "\100\0\1\5\74\0\2\137\1\140\14\0\1\137\63\0"+
    "\1\141\64\0\1\142\7\0\1\143\1\141\64\0\1\142"+
    "\12\0\1\144\62\0\1\142\20\0\1\145\1\146\6\0"+
    "\1\147\22\0\1\150\21\0\1\142\12\0\1\151\2\0"+
    "\1\152\57\0\1\142\12\0\1\153\62\0\1\142\75\0"+
    "\1\142\15\0\1\154\57\0\1\142\12\0\1\155\3\0"+
    "\1\156\56\0\1\142\12\0\1\157\22\0\1\160\37\0"+
    "\1\142\5\0\16\161\1\162\2\161\2\0\24\161\47\0"+
    "\1\163\1\0\1\164\102\0\1\165\40\0\1\142\15\0"+
    "\1\166\57\0\1\142\16\0\1\167\56\0\1\142\15\0"+
    "\1\170\1\171\1\0\1\172\54\0\1\142\30\0\1\173"+
    "\44\0\1\142\42\0\1\174\32\0\1\142\40\0\1\175"+
    "\34\0\1\142\12\0\1\176\22\0\1\177\37\0\1\142"+
    "\15\0\1\200\57\0\1\142\13\0\1\201\20\0\1\202"+
    "\40\0\1\142\13\0\1\203\61\0\1\142\55\0\1\40"+
    "\23\0\1\204\1\205\165\0\1\206\5\0\1\63\74\0"+
    "\2\207\1\210\14\0\1\207\63\0\1\211\64\0\1\212"+
    "\7\0\1\213\1\211\64\0\1\212\12\0\1\214\62\0"+
    "\1\212\20\0\1\215\1\216\6\0\1\217\22\0\1\220"+
    "\21\0\1\212\12\0\1\221\2\0\1\222\57\0\1\212"+
    "\12\0\1\223\62\0\1\212\75\0\1\212\15\0\1\224"+
    "\57\0\1\212\12\0\1\225\3\0\1\226\56\0\1\212"+
    "\12\0\1\227\22\0\1\230\37\0\1\212\5\0\16\231"+
    "\1\232\2\231\2\0\24\231\56\0\1\233\40\0\1\212"+
    "\15\0\1\234\57\0\1\212\16\0\1\235\56\0\1\212"+
    "\15\0\1\236\1\237\1\0\1\240\54\0\1\212\30\0"+
    "\1\241\44\0\1\212\42\0\1\242\32\0\1\212\40\0"+
    "\1\243\34\0\1\212\12\0\1\244\22\0\1\245\37\0"+
    "\1\212\15\0\1\246\57\0\1\212\13\0\1\247\20\0"+
    "\1\250\40\0\1\212\13\0\1\251\61\0\1\212\55\0"+
    "\1\116\23\0\1\252\1\253\165\0\1\254\4\0\2\137"+
    "\1\255\14\0\1\137\61\0\1\256\1\257\75\0\1\143"+
    "\1\141\100\0\1\260\117\0\1\261\73\0\1\262\73\0"+
    "\1\263\75\0\1\264\61\0\1\265\115\0\1\266\51\0"+
    "\1\267\7\0\1\270\74\0\1\271\67\0\1\272\130\0"+
    "\1\273\60\0\1\274\75\0\1\275\50\0\2\276\16\163"+
    "\1\0\3\163\1\0\24\163\12\0\1\163\10\0\1\163"+
    "\1\0\20\164\1\0\3\164\1\277\24\164\12\0\1\164"+
    "\10\0\1\164\16\0\1\300\105\0\1\301\65\0\1\302"+
    "\71\0\1\303\102\0\1\304\6\0\1\305\62\0\1\306"+
    "\101\0\1\307\11\0\1\310\105\0\1\311\63\0\1\312"+
    "\56\0\1\313\116\0\1\314\60\0\1\315\16\0\1\316"+
    "\72\0\1\317\100\0\1\320\44\0\1\205\161\0\1\321"+
    "\3\0\1\322\4\0\2\207\1\323\14\0\1\207\61\0"+
    "\1\324\1\325\75\0\1\213\1\211\100\0\1\326\117\0"+
    "\1\327\73\0\1\330\73\0\1\331\75\0\1\332\61\0"+
    "\1\333\115\0\1\334\51\0\1\335\7\0\1\336\74\0"+
    "\1\337\67\0\1\340\130\0\1\341\60\0\1\342\75\0"+
    "\1\343\65\0\1\344\105\0\1\345\65\0\1\346\71\0"+
    "\1\347\102\0\1\350\6\0\1\351\62\0\1\352\101\0"+
    "\1\353\11\0\1\354\105\0\1\355\63\0\1\356\56\0"+
    "\1\357\116\0\1\360\60\0\1\361\16\0\1\362\72\0"+
    "\1\363\100\0\1\364\44\0\1\253\161\0\1\365\3\0"+
    "\1\366\4\0\2\137\1\367\14\0\1\137\62\0\1\257"+
    "\102\0\1\370\127\0\1\371\42\0\1\372\74\0\1\373"+
    "\3\0\1\374\114\0\1\375\60\0\1\376\124\0\1\377"+
    "\44\0\1\u0100\73\0\1\u0101\14\0\1\u0102\65\0\1\u0103"+
    "\67\0\1\u0104\77\0\1\u0105\76\0\1\u0106\75\0\1\u0107"+
    "\104\0\1\u0108\66\0\1\u0109\124\0\1\u010a\42\0\1\u010b"+
    "\75\0\1\u010c\75\0\1\u010d\104\0\1\u010e\75\0\1\u010f"+
    "\105\0\1\u0110\64\0\1\u0111\73\0\1\u0112\107\0\1\u0113"+
    "\57\0\1\u0114\114\0\1\u0115\17\0\1\u0116\35\0\1\u0117"+
    "\104\0\1\u0118\105\0\1\u0119\135\0\1\321\101\0\1\142"+
    "\4\0\2\207\1\u011a\14\0\1\207\62\0\1\325\102\0"+
    "\1\u011b\127\0\1\u011c\42\0\1\u011d\74\0\1\u011e\3\0"+
    "\1\u011f\114\0\1\u0120\60\0\1\u0121\124\0\1\u0122\44\0"+
    "\1\u0123\73\0\1\u0124\14\0\1\u0125\65\0\1\u0126\67\0"+
    "\1\u0127\77\0\1\u0128\76\0\1\u0129\75\0\1\u012a\75\0"+
    "\1\u012b\124\0\1\u012c\42\0\1\u012d\75\0\1\u012e\75\0"+
    "\1\u012f\104\0\1\u0130\75\0\1\u0131\105\0\1\u0132\64\0"+
    "\1\u0133\73\0\1\u0134\107\0\1\u0135\57\0\1\u0136\114\0"+
    "\1\u0137\17\0\1\u0138\35\0\1\u0139\104\0\1\u013a\105\0"+
    "\1\u013b\135\0\1\365\101\0\1\212\4\0\2\137\1\u013c"+
    "\14\0\1\137\70\0\1\u013d\115\0\1\u013e\75\0\1\u013f"+
    "\53\0\1\u0140\112\0\1\u0141\57\0\1\u0142\103\0\1\u0143"+
    "\67\0\1\u0144\76\0\1\u0145\100\0\1\u0146\72\0\1\u0147"+
    "\65\0\2\276\15\0\1\276\65\0\1\u0148\100\0\1\u0149"+
    "\110\0\1\u014a\75\0\1\u014b\76\0\1\u014c\56\0\1\u014d"+
    "\100\0\1\u014e\114\0\1\u014f\55\0\1\u0150\112\0\1\u0151"+
    "\57\0\1\u0152\74\0\1\u0153\120\0\1\u0154\55\0\1\u0155"+
    "\115\0\1\u0156\73\0\1\u0157\45\0\2\207\1\u0158\14\0"+
    "\1\207\70\0\1\u0159\115\0\1\u015a\75\0\1\u015b\53\0"+
    "\1\u015c\112\0\1\u015d\57\0\1\u015e\103\0\1\u015f\67\0"+
    "\1\u0160\76\0\1\u0161\100\0\1\u0162\72\0\1\u0163\74\0"+
    "\1\u0164\100\0\1\u0165\110\0\1\u0166\75\0\1\u0167\76\0"+
    "\1\u0168\56\0\1\u0169\100\0\1\u016a\114\0\1\u016b\55\0"+
    "\1\u016c\112\0\1\u016d\57\0\1\u016e\74\0\1\u016f\120\0"+
    "\1\u0170\55\0\1\u0171\115\0\1\u0172\73\0\1\u0173\56\0"+
    "\1\u0174\111\0\1\u0175\77\0\1\u0176\61\0\1\u0177\112\0"+
    "\1\u0178\72\0\1\u0179\56\0\1\u017a\120\0\1\u017b\76\0"+
    "\1\u017c\70\0\1\u017d\75\0\1\u017e\62\0\1\u017f\76\0"+
    "\1\u0180\72\0\1\u0181\112\0\1\u0182\102\0\1\u0183\56\0"+
    "\1\u0184\72\0\1\u0185\127\0\1\u0186\42\0\1\u0187\77\0"+
    "\1\u0188\114\0\1\u0189\77\0\1\u018a\54\0\1\u018b\111\0"+
    "\1\u018c\77\0\1\u018d\61\0\1\u018e\112\0\1\u018f\72\0"+
    "\1\u0190\56\0\1\u0191\120\0\1\u0192\76\0\1\u0193\70\0"+
    "\1\u0194\75\0\1\u0195\62\0\1\u0196\76\0\1\u0197\72\0"+
    "\1\u0198\112\0\1\u0199\102\0\1\u019a\56\0\1\u019b\72\0"+
    "\1\u019c\127\0\1\u019d\42\0\1\u019e\77\0\1\u019f\114\0"+
    "\1\u01a0\77\0\1\u01a1\52\0\1\u01a2\100\0\1\u01a3\115\0"+
    "\1\u01a4\52\0\1\u01a5\77\0\1\u01a6\73\0\1\u01a7\116\0"+
    "\1\u01a8\73\0\1\u01a9\75\0\1\u01aa\62\0\1\u01ab\115\0"+
    "\1\u01ac\73\0\1\u01ad\74\0\1\u01ae\55\0\1\u01af\103\0"+
    "\1\u01b0\71\0\1\u01b1\115\0\1\u01b2\54\0\1\u01b3\76\0"+
    "\1\u01b4\1\u01b5\74\0\1\u01b6\1\u01b7\130\0\1\u01b8\36\0"+
    "\1\u01b9\100\0\1\u01ba\115\0\1\u01bb\52\0\1\u01bc\77\0"+
    "\1\u01bd\73\0\1\u01be\116\0\1\u01bf\73\0\1\u01c0\75\0"+
    "\1\u01c1\62\0\1\u01c2\115\0\1\u01c3\73\0\1\u01c4\74\0"+
    "\1\u01c5\55\0\1\u01c6\103\0\1\u01c7\71\0\1\u01c8\115\0"+
    "\1\u01c9\54\0\1\u01ca\76\0\1\u01cb\1\u01cc\74\0\1\u01cd"+
    "\1\u01ce\130\0\1\u01cf\37\0\1\u01d0\75\0\1\u01d1\75\0"+
    "\1\u01d2\103\0\1\u01d3\66\0\1\u01d4\76\0\1\u01d5\113\0"+
    "\1\u01d6\112\0\1\u01d7\41\0\1\u01d8\122\0\1\u01d9\1\u01da"+
    "\1\u01db\67\0\1\u01dc\77\0\1\u01dd\61\0\1\u01de\70\0"+
    "\1\u01df\76\0\1\u01e0\101\0\1\u01e1\75\0\1\u01e2\75\0"+
    "\1\u01e3\75\0\1\u01e4\71\0\1\u01e5\73\0\1\u01e6\75\0"+
    "\1\u01e7\75\0\1\u01e8\103\0\1\u01e9\66\0\1\u01ea\76\0"+
    "\1\u01eb\113\0\1\u01ec\112\0\1\u01ed\41\0\1\u01ee\122\0"+
    "\1\u01ef\1\u01f0\1\u01f1\67\0\1\u01f2\77\0\1\u01f3\61\0"+
    "\1\u01f4\70\0\1\u01f5\76\0\1\u01f6\101\0\1\u01f7\75\0"+
    "\1\u01f8\75\0\1\u01f9\75\0\1\u01fa\71\0\1\u01fb\76\0"+
    "\1\u01fc\75\0\1\u01fd\75\0\1\u01fe\107\0\1\u01ff\57\0"+
    "\1\u0200\101\0\1\u0201\110\0\1\u0202\61\0\1\u0203\75\0"+
    "\1\u0204\1\u0205\73\0\1\u0206\101\0\1\u0207\73\0\1\u0208"+
    "\75\0\1\u0209\75\0\1\u020a\107\0\1\u020b\57\0\1\u020c"+
    "\101\0\1\u020d\110\0\1\u020e\61\0\1\u020f\75\0\1\u0210"+
    "\1\u0211\73\0\1\u0212\101\0\1\u0213\70\0\1\u0214\113\0"+
    "\1\u0215\61\0\1\u0216\100\0\1\u0217\73\0\1\u0218\72\0"+
    "\1\u0219\103\0\1\u021a\75\0\1\u021b\66\0\1\u021c\76\0"+
    "\1\u021d\113\0\1\u021e\61\0\1\u021f\100\0\1\u0220\73\0"+
    "\1\u0221\72\0\1\u0222\103\0\1\u0223\75\0\1\u0224\66\0"+
    "\1\u0225\75\0\1\u0226\103\0\1\u0227\67\0\1\u0228\76\0"+
    "\1\u0229\103\0\1\u022a\66\0\1\u022b\103\0\1\u022c\67\0"+
    "\1\u022d\76\0\1\u022e\103\0\1\u022f\67\0\1\u0230\77\0"+
    "\1\u0231\73\0\1\u0232\77\0\1\u0233\76\0\1\u0234\107\0"+
    "\1\u0235\63\0\1\u0236\107\0\1\u0237\63\0\1\u0238\75\0"+
    "\1\u0239\61\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27156];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\3\1\1\11\12\1\1\11"+
    "\13\1\1\11\3\1\14\11\1\1\1\11\1\1\1\11"+
    "\3\1\1\11\12\1\1\11\13\1\1\11\3\1\14\11"+
    "\1\1\1\11\1\1\1\0\1\11\1\1\14\0\1\1"+
    "\1\0\1\11\1\1\11\0\1\11\6\0\1\1\1\11"+
    "\1\1\1\11\1\1\1\0\1\11\1\1\14\0\1\1"+
    "\1\0\1\11\10\0\1\11\6\0\1\1\1\11\1\1"+
    "\1\0\1\11\1\1\16\0\1\11\12\0\1\11\7\0"+
    "\1\1\2\0\1\11\1\1\27\0\1\11\7\0\1\1"+
    "\1\0\1\1\6\0\2\11\4\0\1\11\1\0\2\11"+
    "\1\1\1\11\20\0\1\1\6\0\2\11\4\0\1\11"+
    "\1\0\3\11\30\0\1\11\1\0\1\11\6\0\1\11"+
    "\4\0\1\11\15\0\1\11\1\0\1\11\6\0\1\11"+
    "\4\0\1\11\10\0\1\11\7\0\1\1\1\11\15\0"+
    "\1\11\7\0\1\1\1\11\23\0\1\11\3\0\2\11"+
    "\21\0\1\11\3\0\2\11\11\0\5\11\2\0\1\11"+
    "\5\0\1\11\2\0\4\11\2\0\5\11\2\0\1\11"+
    "\5\0\1\11\2\0\4\11\1\0\1\11\1\0\1\11"+
    "\10\0\2\11\1\0\1\11\10\0\2\11\4\0\3\11"+
    "\1\0\1\11\4\0\3\11\2\0\1\11\1\0\2\11"+
    "\1\0\1\11\1\0\2\11\4\0\1\11\1\0\1\11"+
    "\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[569];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
        String mensaje;
        private token tmp;
        private void comprobacionEspacios(){
                if(token.contadorLocal==(token.contadorGlobal+1)){
                        token.contadorGlobal +=1;
                }else if(token.contadorLocal < token.contadorGlobal){
                      token.contadorGlobal = token.contadorLocal;
                }else if(token.contadorLocal  == token.contadorGlobal){

                }else{
                        mensaje = "Error de tabulacion en:\ncol: "+ yycolumn+" || linea: "+yyline+"\n";
                       cargar_archivo.escribirNotificacion(mensaje, 1);
                }
        }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLexico(java.io.Reader in) {
          
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 198) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {         mensaje = "Finalizacion de analisis lexico\n";
        cargar_archivo.escribirNotificacion(mensaje, 0);
        //return 1;
        return new Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 138: break;
          case 2: 
            { token.contadorLocal=0;
                                //cargar_archivo.escribirToken("Finlinea ignorada");
            } 
            // fall through
          case 139: break;
          case 3: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal, 1);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.ENTERO, tmp);
            } 
            // fall through
          case 140: break;
          case 4: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.PUNTO, tmp);
            } 
            // fall through
          case 141: break;
          case 5: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.ID, tmp);
            } 
            // fall through
          case 142: break;
          case 6: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.DIVISION, tmp);
            } 
            // fall through
          case 143: break;
          case 7: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.MULTI, tmp);
            } 
            // fall through
          case 144: break;
          case 8: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.COMPARACION, tmp);
            } 
            // fall through
          case 145: break;
          case 9: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.IGUAL, tmp);
            } 
            // fall through
          case 146: break;
          case 10: 
            { cargar_archivo.escribirToken("finlinea" + "estado2");
            } 
            // fall through
          case 147: break;
          case 11: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.DOSPUNTOS, tmp);
            } 
            // fall through
          case 148: break;
          case 12: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.SUMA, tmp);
            } 
            // fall through
          case 149: break;
          case 13: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.RESTA, tmp);
            } 
            // fall through
          case 150: break;
          case 14: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.APARENTESIS, tmp);
            } 
            // fall through
          case 151: break;
          case 15: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.CPARENTESIS, tmp);
            } 
            // fall through
          case 152: break;
          case 16: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.PORCENTAJE, tmp);
            } 
            // fall through
          case 153: break;
          case 17: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.COMA, tmp);
            } 
            // fall through
          case 154: break;
          case 18: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.ACORCHETEC, tmp);
            } 
            // fall through
          case 155: break;
          case 19: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.CCORCHETEC, tmp);
            } 
            // fall through
          case 156: break;
          case 20: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.ACORCHETE, tmp);
            } 
            // fall through
          case 157: break;
          case 21: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.CCORCHETE, tmp);
            } 
            // fall through
          case 158: break;
          case 22: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.POTENCIA, tmp);
            } 
            // fall through
          case 159: break;
          case 23: 
            { System.out.print(yytext());
            } 
            // fall through
          case 160: break;
          case 24: 
            { tmp = new token(yycolumn, yyline, "FINLINEA", token.contadorLocal);
                                token.contadorLocal=0;
                                yybegin(YYINITIAL);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.FINLINEA, tmp);
            } 
            // fall through
          case 161: break;
          case 25: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal, 1);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.ENTERO, tmp);
            } 
            // fall through
          case 162: break;
          case 26: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.PUNTO, tmp);
            } 
            // fall through
          case 163: break;
          case 27: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.ID, tmp);
            } 
            // fall through
          case 164: break;
          case 28: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.DIVISION, tmp);
            } 
            // fall through
          case 165: break;
          case 29: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.MULTI, tmp);
            } 
            // fall through
          case 166: break;
          case 30: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.COMPARACION, tmp);
            } 
            // fall through
          case 167: break;
          case 31: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.IGUAL, tmp);
            } 
            // fall through
          case 168: break;
          case 32: 
            { tmp = new token(yycolumn, yyline, "FINLINEA", token.contadorLocal);
                                        token.contadorLocal = 0;
                                        yybegin(YYINITIAL);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.FINLINEA, tmp);
            } 
            // fall through
          case 169: break;
          case 33: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.DOSPUNTOS, tmp);
            } 
            // fall through
          case 170: break;
          case 34: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.SUMA, tmp);
            } 
            // fall through
          case 171: break;
          case 35: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.RESTA, tmp);
            } 
            // fall through
          case 172: break;
          case 36: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.APARENTESIS, tmp);
            } 
            // fall through
          case 173: break;
          case 37: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.CPARENTESIS, tmp);
            } 
            // fall through
          case 174: break;
          case 38: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.PORCENTAJE, tmp);
            } 
            // fall through
          case 175: break;
          case 39: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.COMA, tmp);
            } 
            // fall through
          case 176: break;
          case 40: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.ACORCHETEC, tmp);
            } 
            // fall through
          case 177: break;
          case 41: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.CCORCHETEC, tmp);
            } 
            // fall through
          case 178: break;
          case 42: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.ACORCHETE, tmp);
            } 
            // fall through
          case 179: break;
          case 43: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.CCORCHETE, tmp);
            } 
            // fall through
          case 180: break;
          case 44: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.POTENCIA, tmp);
            } 
            // fall through
          case 181: break;
          case 45: 
            { //System.out.println("Espacio Blanco");
            } 
            // fall through
          case 182: break;
          case 46: 
            { token.contadorLocal+=1;
                                //cargar_archivo.escribirToken("Tabulador: "+token.contadorLocal);
            } 
            // fall through
          case 183: break;
          case 47: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.SI, tmp);
            } 
            // fall through
          case 184: break;
          case 48: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.STRING, tmp);
            } 
            // fall through
          case 185: break;
          case 49: 
            { //System.out.println("Comentario: " + yytext());
            } 
            // fall through
          case 186: break;
          case 50: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.OR, tmp);
            } 
            // fall through
          case 187: break;
          case 51: 
            { //cargar_archivo.escribirToken("Espacio Blanco");
            } 
            // fall through
          case 188: break;
          case 52: 
            { //cargar_archivo.escribirToken("Tabulador: "+token.contadorLocal);
                                        //System.out.println("tabulador"+ "estado1");
            } 
            // fall through
          case 189: break;
          case 53: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.SI, tmp);
            } 
            // fall through
          case 190: break;
          case 54: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.STRING, tmp);
            } 
            // fall through
          case 191: break;
          case 55: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.OR, tmp);
            } 
            // fall through
          case 192: break;
          case 56: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal, 1);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.REAL, tmp);
            } 
            // fall through
          case 193: break;
          case 57: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.AND, tmp);
            } 
            // fall through
          case 194: break;
          case 58: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal, 1);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.REAL, tmp);
            } 
            // fall through
          case 195: break;
          case 59: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.AND, tmp);
            } 
            // fall through
          case 196: break;
          case 60: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.RREAL, tmp);
            } 
            // fall through
          case 197: break;
          case 61: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.RAIZ, tmp);
            } 
            // fall through
          case 198: break;
          case 62: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.LEER, tmp);
            } 
            // fall through
          case 199: break;
          case 63: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.SENO, tmp);
            } 
            // fall through
          case 200: break;
          case 64: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.SINO, tmp);
            } 
            // fall through
          case 201: break;
          case 65: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.NULO, tmp);
            } 
            // fall through
          case 202: break;
          case 66: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.RREAL, tmp);
            } 
            // fall through
          case 203: break;
          case 67: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.RAIZ, tmp);
            } 
            // fall through
          case 204: break;
          case 68: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.LEER, tmp);
            } 
            // fall through
          case 205: break;
          case 69: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.SENO, tmp);
            } 
            // fall through
          case 206: break;
          case 70: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.SINO, tmp);
            } 
            // fall through
          case 207: break;
          case 71: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.NULO, tmp);
            } 
            // fall through
          case 208: break;
          case 72: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.DESDE, tmp);
            } 
            // fall through
          case 209: break;
          case 73: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal, 2);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.FALSO, tmp);
            } 
            // fall through
          case 210: break;
          case 74: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.CLASE, tmp);
            } 
            // fall through
          case 211: break;
          case 75: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.HACER, tmp);
            } 
            // fall through
          case 212: break;
          case 76: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.DESDE, tmp);
            } 
            // fall through
          case 213: break;
          case 77: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal, 2);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.FALSO, tmp);
            } 
            // fall through
          case 214: break;
          case 78: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.CLASE, tmp);
            } 
            // fall through
          case 215: break;
          case 79: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.HACER, tmp);
            } 
            // fall through
          case 216: break;
          case 80: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.RENTERO, tmp);
            } 
            // fall through
          case 217: break;
          case 81: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.CADENA, tmp);
            } 
            // fall through
          case 218: break;
          case 82: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.COSENO, tmp);
            } 
            // fall through
          case 219: break;
          case 83: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.RENTERO, tmp);
            } 
            // fall through
          case 220: break;
          case 84: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.CADENA, tmp);
            } 
            // fall through
          case 221: break;
          case 85: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.COSENO, tmp);
            } 
            // fall through
          case 222: break;
          case 86: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.BOLEANO, tmp);
            } 
            // fall through
          case 223: break;
          case 87: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.INCLUIR, tmp);
            } 
            // fall through
          case 224: break;
          case 88: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.METODOS, tmp);
            } 
            // fall through
          case 225: break;
          case 89: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.BOLEANO, tmp);
            } 
            // fall through
          case 226: break;
          case 90: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.INCLUIR, tmp);
            } 
            // fall through
          case 227: break;
          case 91: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.METODOS, tmp);
            } 
            // fall through
          case 228: break;
          case 92: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.ELIMINAR, tmp);
            } 
            // fall through
          case 229: break;
          case 93: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.ESCRIBIR, tmp);
            } 
            // fall through
          case 230: break;
          case 94: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.ENTONCES, tmp);
            } 
            // fall through
          case 231: break;
          case 95: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.EXTIENDE, tmp);
            } 
            // fall through
          case 232: break;
          case 96: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.DEVOLVER, tmp);
            } 
            // fall through
          case 233: break;
          case 97: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.TANGENTE, tmp);
            } 
            // fall through
          case 234: break;
          case 98: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.MIENTRAS, tmp);
            } 
            // fall through
          case 235: break;
          case 99: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.PRIVADAS, tmp);
            } 
            // fall through
          case 236: break;
          case 100: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.PRIVADO, tmp);
            } 
            // fall through
          case 237: break;
          case 101: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.PUBLICA, tmp);
            } 
            // fall through
          case 238: break;
          case 102: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.PUBLICO, tmp);
            } 
            // fall through
          case 239: break;
          case 103: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.ELIMINAR, tmp);
            } 
            // fall through
          case 240: break;
          case 104: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.ESCRIBIR, tmp);
            } 
            // fall through
          case 241: break;
          case 105: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.ENTONCES, tmp);
            } 
            // fall through
          case 242: break;
          case 106: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.EXTIENDE, tmp);
            } 
            // fall through
          case 243: break;
          case 107: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.DEVOLVER, tmp);
            } 
            // fall through
          case 244: break;
          case 108: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.TANGENTE, tmp);
            } 
            // fall through
          case 245: break;
          case 109: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.MIENTRAS, tmp);
            } 
            // fall through
          case 246: break;
          case 110: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());

                                        return new Symbol(sym.PRIVADAS, tmp);
            } 
            // fall through
          case 247: break;
          case 111: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.PRIVADO, tmp);
            } 
            // fall through
          case 248: break;
          case 112: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.PUBLICA, tmp);
            } 
            // fall through
          case 249: break;
          case 113: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.PUBLICO, tmp);
            } 
            // fall through
          case 250: break;
          case 114: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal, 2);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.VERDADERO, tmp);
            } 
            // fall through
          case 251: break;
          case 115: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.LOG, tmp);
            } 
            // fall through
          case 252: break;
          case 116: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.PRINCIPAL, tmp);
            } 
            // fall through
          case 253: break;
          case 117: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal, 2);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.VERDADERO, tmp);
            } 
            // fall through
          case 254: break;
          case 118: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.LOG, tmp);
            } 
            // fall through
          case 255: break;
          case 119: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.PRINCIPAL, tmp);
            } 
            // fall through
          case 256: break;
          case 120: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                return new Symbol(sym.DESTRUCTOR, tmp);
            } 
            // fall through
          case 257: break;
          case 121: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.INSTANCIAR, tmp);
            } 
            // fall through
          case 258: break;
          case 122: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.PROTEGIDAS, tmp);
            } 
            // fall through
          case 259: break;
          case 123: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.PROTEGIDO, tmp);
            } 
            // fall through
          case 260: break;
          case 124: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                        return new Symbol(sym.DESTRUCTOR, tmp);
            } 
            // fall through
          case 261: break;
          case 125: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.INSTANCIAR, tmp);
            } 
            // fall through
          case 262: break;
          case 126: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.PROTEGIDAS, tmp);
            } 
            // fall through
          case 263: break;
          case 127: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.PROTEGIDO, tmp);
            } 
            // fall through
          case 264: break;
          case 128: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.CADENAREAL, tmp);
            } 
            // fall through
          case 265: break;
          case 129: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.CONSTRUCTOR, tmp);
            } 
            // fall through
          case 266: break;
          case 130: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.PROPIEDADES, tmp);
            } 
            // fall through
          case 267: break;
          case 131: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.CADENAREAL, tmp);
            } 
            // fall through
          case 268: break;
          case 132: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.CONSTRUCTOR, tmp);
            } 
            // fall through
          case 269: break;
          case 133: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.PROPIEDADES, tmp);
            } 
            // fall through
          case 270: break;
          case 134: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.CADENAENTERO, tmp);
            } 
            // fall through
          case 271: break;
          case 135: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.CADENAENTERO, tmp);
            } 
            // fall through
          case 272: break;
          case 136: 
            { this.comprobacionEspacios();
                                tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                yybegin(estado1);
                                cargar_archivo.escribirToken(tmp.toString());
                                return new Symbol(sym.CADENABOLEANO, tmp);
            } 
            // fall through
          case 273: break;
          case 137: 
            { this.comprobacionEspacios();
                                        tmp = new token(yycolumn, yyline, yytext(), token.contadorLocal);
                                        cargar_archivo.escribirToken(tmp.toString());
                                        return new Symbol(sym.CADENABOLEANO, tmp);
            } 
            // fall through
          case 274: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexico [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorLexico scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorLexico(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
