
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package kurokitsune.main;

import informacion.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\003" +
    "\000\002\003\004\000\002\003\003\000\002\004\005\000" +
    "\002\005\004\000\002\005\003\000\002\006\010\000\002" +
    "\006\007\000\002\006\007\000\002\006\006\000\002\007" +
    "\004\000\002\007\005\000\002\012\004\000\002\012\005" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\014\004\000\002\014\003\000\002" +
    "\015\012\000\002\015\012\000\002\015\012\000\002\015" +
    "\011\000\002\015\011\000\002\015\011\000\002\015\006" +
    "\000\002\015\005\000\002\016\004\000\002\016\003\000" +
    "\002\017\010\000\002\017\010\000\002\017\010\000\002" +
    "\017\007\000\002\017\007\000\002\017\007\000\002\020" +
    "\007\000\002\020\007\000\002\020\010\000\002\020\010" +
    "\000\002\020\006\000\002\020\006\000\002\020\007\000" +
    "\002\020\007\000\002\010\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\006\033\013\044\011\001\002\000\006\033" +
    "\ufffa\044\ufffa\001\002\000\006\002\ufff7\033\ufff7\001\002" +
    "\000\004\002\152\001\002\000\004\033\013\001\002\000" +
    "\004\002\ufffc\001\002\000\004\074\147\001\002\000\006" +
    "\033\013\044\011\001\002\000\004\075\014\001\002\000" +
    "\004\076\016\001\002\000\004\004\032\001\002\000\014" +
    "\077\023\102\017\103\020\104\024\105\025\001\002\000" +
    "\004\075\uffee\001\002\000\004\075\uffed\001\002\000\006" +
    "\056\027\077\030\001\002\000\004\075\026\001\002\000" +
    "\004\004\ufff2\001\002\000\004\075\uffec\001\002\000\004" +
    "\075\uffeb\001\002\000\006\056\ufff0\077\ufff0\001\002\000" +
    "\012\102\017\103\020\104\024\105\025\001\002\000\004" +
    "\004\ufff1\001\002\000\006\056\uffef\077\uffef\001\002\000" +
    "\022\002\ufff3\033\ufff3\034\037\035\035\102\017\103\020" +
    "\104\024\105\025\001\002\000\010\002\ufff5\033\ufff5\035" +
    "\035\001\002\000\022\002\uffe9\033\uffe9\034\uffe9\035\uffe9" +
    "\102\uffe9\103\uffe9\104\uffe9\105\uffe9\001\002\000\010\036" +
    "\076\037\075\040\077\001\002\000\010\002\uffdf\033\uffdf" +
    "\035\uffdf\001\002\000\010\067\052\070\050\071\051\001" +
    "\002\000\022\002\ufff4\033\ufff4\034\037\035\035\102\017" +
    "\103\020\104\024\105\025\001\002\000\004\075\042\001" +
    "\002\000\004\004\043\001\002\000\022\002\uffe1\033\uffe1" +
    "\034\037\035\uffe1\102\017\103\020\104\024\105\025\001" +
    "\002\000\022\002\uffe2\033\uffe2\034\uffe2\035\uffe2\102\uffe2" +
    "\103\uffe2\104\uffe2\105\uffe2\001\002\000\010\002\ufff6\033" +
    "\ufff6\035\035\001\002\000\022\002\uffea\033\uffea\034\uffea" +
    "\035\uffea\102\uffea\103\uffea\104\uffea\105\uffea\001\002\000" +
    "\010\002\uffe0\033\uffe0\035\uffe0\001\002\000\004\050\067" +
    "\001\002\000\004\050\061\001\002\000\004\050\053\001" +
    "\002\000\004\004\054\001\002\000\012\102\017\103\020" +
    "\104\024\105\025\001\002\000\004\075\056\001\002\000" +
    "\004\004\057\001\002\000\022\002\uffe5\033\uffe5\034\037" +
    "\035\uffe5\102\017\103\020\104\024\105\025\001\002\000" +
    "\022\002\uffe8\033\uffe8\034\uffe8\035\uffe8\102\uffe8\103\uffe8" +
    "\104\uffe8\105\uffe8\001\002\000\004\004\062\001\002\000" +
    "\012\102\017\103\020\104\024\105\025\001\002\000\004" +
    "\075\064\001\002\000\004\004\065\001\002\000\022\002" +
    "\uffe3\033\uffe3\034\037\035\uffe3\102\017\103\020\104\024" +
    "\105\025\001\002\000\022\002\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\102\uffe6\103\uffe6\104\uffe6\105\uffe6\001\002\000\004" +
    "\004\070\001\002\000\012\102\017\103\020\104\024\105" +
    "\025\001\002\000\004\075\072\001\002\000\004\004\073" +
    "\001\002\000\022\002\uffe4\033\uffe4\034\037\035\uffe4\102" +
    "\017\103\020\104\024\105\025\001\002\000\022\002\uffe7" +
    "\033\uffe7\034\uffe7\035\uffe7\102\uffe7\103\uffe7\104\uffe7\105" +
    "\uffe7\001\002\000\004\050\136\001\002\000\004\050\132" +
    "\001\002\000\004\050\100\001\002\000\004\004\101\001" +
    "\002\000\020\007\102\041\105\042\104\102\017\103\020" +
    "\104\024\105\025\001\002\000\004\075\125\001\002\000" +
    "\010\002\uffd9\033\uffd9\035\035\001\002\000\004\076\016" +
    "\001\002\000\004\076\016\001\002\000\004\075\107\001" +
    "\002\000\004\076\016\001\002\000\004\004\111\001\002" +
    "\000\026\002\uffd0\007\uffd0\033\uffd0\035\uffd0\041\uffd0\042" +
    "\uffd0\102\uffd0\103\uffd0\104\uffd0\105\uffd0\001\002\000\026" +
    "\002\uffd2\007\102\033\uffd2\035\uffd2\041\105\042\104\102" +
    "\017\103\020\104\024\105\025\001\002\000\010\002\uffd6" +
    "\033\uffd6\035\uffd6\001\002\000\004\004\115\001\002\000" +
    "\026\002\uffd0\007\uffd0\033\uffd0\035\uffd0\041\uffd0\042\uffd0" +
    "\102\uffd0\103\uffd0\104\uffd0\105\uffd0\001\002\000\026\002" +
    "\uffd4\007\102\033\uffd4\035\uffd4\041\105\042\104\102\017" +
    "\103\020\104\024\105\025\001\002\000\010\002\uffd8\033" +
    "\uffd8\035\uffd8\001\002\000\004\004\121\001\002\000\026" +
    "\002\uffd0\007\uffd0\033\uffd0\035\uffd0\041\uffd0\042\uffd0\102" +
    "\uffd0\103\uffd0\104\uffd0\105\uffd0\001\002\000\026\002\uffd3" +
    "\007\102\033\uffd3\035\uffd3\041\105\042\104\102\017\103" +
    "\020\104\024\105\025\001\002\000\010\002\uffd7\033\uffd7" +
    "\035\uffd7\001\002\000\010\002\uffdc\033\uffdc\035\uffdc\001" +
    "\002\000\004\076\016\001\002\000\004\004\127\001\002" +
    "\000\026\002\uffd0\007\uffd0\033\uffd0\035\uffd0\041\uffd0\042" +
    "\uffd0\102\uffd0\103\uffd0\104\uffd0\105\uffd0\001\002\000\026" +
    "\002\uffd1\007\102\033\uffd1\035\uffd1\041\105\042\104\102" +
    "\017\103\020\104\024\105\025\001\002\000\010\002\uffd5" +
    "\033\uffd5\035\uffd5\001\002\000\004\004\133\001\002\000" +
    "\020\007\102\041\105\042\104\102\017\103\020\104\024" +
    "\105\025\001\002\000\010\002\uffdb\033\uffdb\035\035\001" +
    "\002\000\010\002\uffde\033\uffde\035\uffde\001\002\000\004" +
    "\004\137\001\002\000\020\007\102\041\105\042\104\102" +
    "\017\103\020\104\024\105\025\001\002\000\010\002\uffda" +
    "\033\uffda\035\035\001\002\000\010\002\uffdd\033\uffdd\035" +
    "\uffdd\001\002\000\006\033\ufffb\044\ufffb\001\002\000\004" +
    "\002\ufffd\001\002\000\006\002\uffff\033\013\001\002\000" +
    "\006\002\ufff8\033\ufff8\001\002\000\004\002\000\001\002" +
    "\000\004\004\150\001\002\000\006\033\ufff9\044\ufff9\001" +
    "\002\000\004\002\ufffe\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\016\002\005\003\011\004\003\005\006\006" +
    "\004\021\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\144\021\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\141\005\143" +
    "\006\004\021\142\001\001\000\002\001\001\000\004\007" +
    "\014\001\001\000\002\001\001\000\006\012\020\013\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\030\013" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\040\014\037\015\033\016\032\017\035\001\001\000" +
    "\004\017\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\040\015" +
    "\045\016\044\017\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\040\015\043\001\001\000\002\001" +
    "\001\000\004\017\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\040\015\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\040\015\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\040\015\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\105\020\102\001\001\000\002" +
    "\001\001\000\004\017\123\001\001\000\004\007\117\001" +
    "\001\000\004\007\113\001\001\000\002\001\001\000\004" +
    "\007\107\001\001\000\002\001\001\000\004\010\111\001" +
    "\001\000\006\013\105\020\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\115\001\001\000\006\013" +
    "\105\020\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\121\001\001\000\006\013\105\020\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\125" +
    "\001\001\000\002\001\001\000\004\010\127\001\001\000" +
    "\006\013\105\020\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\105\020\133\001\001\000\004\017" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\105\020\137\001\001\000\004\017\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\144\021\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    arbolSintactico = new Arbol();

    }


    
    public Arbol arbolSintactico;


    @Override
    public void syntax_error(Symbol sy) {
        token t=(token)sy.value;
        done_parsing();
        report_error("Error sintactico cerca de \""+ t.getCadena()+"\" ["+t.getRow()+" : "+t.getCol()+"]",null);
        
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {



  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INCLUIDOS CLASESFUNCIONES PPRINCIPAL 
            {
              Object RESULT =null;
		int incleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Nodo inc = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo cf = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    parser.arbolSintactico.agregarHijo(inc);
                    parser.arbolSintactico.agregarHijo(cf);
                    parser.arbolSintactico.agregarHijo(p);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= INCLUIDOS CLASESFUNCIONES 
            {
              Object RESULT =null;
		int incleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo inc = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo cf = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    parser.arbolSintactico.agregarHijo(inc);
                    parser.arbolSintactico.agregarHijo(cf);
                    parser.arbolSintactico.agregarHijo(new Nodo("PRINCIPAL"));
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= CLASESFUNCIONES PPRINCIPAL 
            {
              Object RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo cf = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    parser.arbolSintactico.agregarHijo(cf);
                    parser.arbolSintactico.agregarHijo(p);
                    
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= INCLUIDOS PPRINCIPAL 
            {
              Object RESULT =null;
		int incleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo inc = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    parser.arbolSintactico.agregarHijo(inc);
                    parser.arbolSintactico.agregarHijo(p);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= PPRINCIPAL 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    parser.arbolSintactico.agregarHijo(new Nodo("PRINCIPAL"));
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INCLUIDOS ::= INCLUIDOS INCLU 
            {
              Nodo RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo in = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo incl= in;
                incl.agregarHijo(i);
                RESULT=incl;
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INCLUIDOS",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INCLUIDOS ::= INCLU 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo incl = new Nodo("INCLUIR");
                incl.agregarHijo(i);
                RESULT=incl;
            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INCLUIDOS",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INCLU ::= INCLUIR STRING FINLINEA 
            {
              Nodo RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		token st = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                String temp = st.getCadena().substring(1, st.getCadena().length()-1);
                Nodo strng = new Nodo (temp);
                RESULT=strng;
            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INCLU",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CLASESFUNCIONES ::= CLASESFUNCIONES PRODCLASE 
            {
              Nodo RESULT =null;
		int cfunleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cfunright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo cfun = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pclleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pclright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo pcl = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    Nodo prodc = cfun;
                    prodc.agregarHijo(pcl);
                    RESULT=prodc;
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CLASESFUNCIONES",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CLASESFUNCIONES ::= PRODCLASE 
            {
              Nodo RESULT =null;
		int pclleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pclright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo pcl = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    Nodo prodc = new Nodo("CLASES");
                    prodc.agregarHijo(pcl);
                    RESULT=prodc;
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CLASESFUNCIONES",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PRODCLASE ::= CLASE ID ARGUMENTOS FINLINEA DPROPIEDADES DMETODOS 
            {
              Nodo RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		token ident = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int arguleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int arguright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Nodo argu = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int dpropleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int dpropright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo dprop = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int dmetleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dmetright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo dmet = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo prop = new Nodo("NOMBRE");
                prop.agregarHijo(new Nodo(ident.getCadena()));
                Nodo arg = new Nodo("PARAMETROS");
                arg.agregarHijo(argu);
                Nodo propi = new Nodo("PROPIEDADES");
                propi.agregarHijo(dprop);
                Nodo met = new Nodo("METODOS");
                met.agregarHijo(dmet);
                Nodo prodcl = new Nodo("CLASE");
                prodcl.agregarHijo(prop);
                if(argu!=null)
                    prodcl.agregarHijo(arg);
                prodcl.agregarHijo(propi);
                prodcl.agregarHijo(met);
                RESULT=prodcl;
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PRODCLASE",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PRODCLASE ::= CLASE ID ARGUMENTOS FINLINEA DMETODOS 
            {
              Nodo RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		token ident = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int arguleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int arguright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Nodo argu = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int dmetleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dmetright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo dmet = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo prop = new Nodo("NOMBRE");
                prop.agregarHijo(new Nodo(ident.getCadena()));
                Nodo arg = new Nodo("PARAMETROS");
                arg.agregarHijo(argu);
                Nodo met = new Nodo("METODOS");
                met.agregarHijo(dmet);
                Nodo prodcl = new Nodo("CLASE");
                prodcl.agregarHijo(prop);
                if(argu!=null)
                    prodcl.agregarHijo(arg);
                prodcl.agregarHijo(met);
                RESULT=prodcl;
    
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PRODCLASE",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PRODCLASE ::= CLASE ID ARGUMENTOS FINLINEA DPROPIEDADES 
            {
              Nodo RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		token ident = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int arguleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int arguright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Nodo argu = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int dpropleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dpropright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo dprop = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo prop = new Nodo("NOMBRE");
                prop.agregarHijo(new Nodo(ident.getCadena()));
                Nodo arg = new Nodo("PARAMETROS");
                arg.agregarHijo(argu);
                Nodo propi = new Nodo("PROPIEDADES");
                propi.agregarHijo(dprop);
                Nodo prodcl = new Nodo("CLASE");
                prodcl.agregarHijo(prop);
                if(argu!=null)
                    prodcl.agregarHijo(arg);
                prodcl.agregarHijo(propi);
                RESULT=prodcl;
    
            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PRODCLASE",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PRODCLASE ::= CLASE ID ARGUMENTOS FINLINEA 
            {
              Nodo RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		token ident = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int arguleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int arguright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo argu = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo prop = new Nodo("NOMBRE");
            prop.agregarHijo(new Nodo(ident.getCadena()));
            Nodo arg = new Nodo("PARAMETROS");
            arg.agregarHijo(argu);
            Nodo prodcl = new Nodo("CLASE");
            prodcl.agregarHijo(prop);
            if(argu!=null)
                prodcl.agregarHijo(arg);
            RESULT=prodcl;
         
         
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PRODCLASE",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ARGUMENTOS ::= APARENTESIS CPARENTESIS 
            {
              Nodo RESULT =null;
		int aparleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aparright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		token apar = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cparleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cparright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		token cpar = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		RESULT=null;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ARGUMENTOS ::= APARENTESIS PARAMETROS_EXP CPARENTESIS 
            {
              Nodo RESULT =null;
		int parexleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int parexright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo parex = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            RESULT=parex;
            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PARAMETROS_EXP ::= TIPODATO ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		token id = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT=new Nodo(id.getCadena());
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_EXP",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMETROS_EXP ::= PARAMETROS_EXP COMA PARAMETROS_EXP 
            {
              Nodo RESULT =null;
		int peizqleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int peizqright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Nodo peizq = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int pederleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pederright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo peder = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                 Nodo arg = peizq;
                 arg.agregarHijo(peder);
                 RESULT=arg;
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_EXP",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPODATO ::= RENTERO 
            {
              Nodo RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPODATO ::= RREAL 
            {
              Nodo RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPODATO ::= BOLEANO 
            {
              Nodo RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPODATO ::= CADENA 
            {
              Nodo RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DPROPIEDADES ::= DPROPIEDADES PROP_EXP 
            {
              Nodo RESULT =null;
		int dpropleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int dpropright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo dprop = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pexpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pexpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo pexp = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo dpropi = dprop;
                dpropi.agregarHijo(pexp);
                RESULT=dpropi;
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DPROPIEDADES",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DPROPIEDADES ::= PROP_EXP 
            {
              Nodo RESULT =null;
		int pexpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pexpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo pexp = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT=pexp;
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DPROPIEDADES",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PROP_EXP ::= PROPIEDADES PUBLICA DOSPUNTOS FINLINEA TIPODATO ID FINLINEA PROP_EXP 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		token id = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int propeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int properight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo prope = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo prote = new Nodo("PUBLICAS");
        prote.agregarHijo(new Nodo(id.getCadena()));
        prote.agregarHijo(prope);
        RESULT=prote;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROP_EXP",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PROP_EXP ::= PROPIEDADES PRIVADAS DOSPUNTOS FINLINEA TIPODATO ID FINLINEA PROP_EXP 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		token id = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int propeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int properight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo prope = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo prote = new Nodo("PRIVADAS");
        prote.agregarHijo(new Nodo(id.getCadena()));
        prote.agregarHijo(prope);
        RESULT=prote;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROP_EXP",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PROP_EXP ::= PROPIEDADES PROTEGIDAS DOSPUNTOS FINLINEA TIPODATO ID FINLINEA PROP_EXP 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		token id = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int propeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int properight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo prope = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo prote = new Nodo("PROTEGIDAS");
        prote.agregarHijo(new Nodo(id.getCadena()));
        prote.agregarHijo(prope);
        RESULT=prote;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROP_EXP",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PROP_EXP ::= PROPIEDADES PUBLICA DOSPUNTOS FINLINEA TIPODATO ID FINLINEA 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		token id = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo prote = new Nodo("PUBLICAS");
        prote.agregarHijo(new Nodo(id.getCadena()));
        RESULT=prote;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROP_EXP",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PROP_EXP ::= PROPIEDADES PRIVADAS DOSPUNTOS FINLINEA TIPODATO ID FINLINEA 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		token id = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo prote = new Nodo("PRIVADAS");
        prote.agregarHijo(new Nodo(id.getCadena()));
        RESULT=prote;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROP_EXP",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PROP_EXP ::= PROPIEDADES PROTEGIDAS DOSPUNTOS FINLINEA TIPODATO ID FINLINEA 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		token id = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo prote = new Nodo("PROTEGIDAS");
        prote.agregarHijo(new Nodo(id.getCadena()));
        RESULT=prote;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROP_EXP",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PROP_EXP ::= TIPODATO ID FINLINEA PROP_EXP 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		token id = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int propeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int properight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo prope = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo propi = new Nodo(id.getCadena());
        propi.agregarHijo(prope);
        RESULT=propi;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROP_EXP",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PROP_EXP ::= TIPODATO ID FINLINEA 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		token id = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        RESULT=new Nodo(id.getCadena());
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROP_EXP",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DMETODOS ::= DMETODOS MET_EXP 
            {
              Nodo RESULT =null;
		int dmetleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int dmetright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo dmet = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int mexpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int mexpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo mexp = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                Nodo dpropi = dmet;
                dpropi.agregarHijo(mexp);
                RESULT=dpropi;
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DMETODOS",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DMETODOS ::= MET_EXP 
            {
              Nodo RESULT =null;
		int mexpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int mexpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo mexp = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                RESULT=mexp;
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DMETODOS",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MET_EXP ::= METODOS PUBLICO DOSPUNTOS FINLINEA PRODFUNCION MET_EXP 
            {
              Nodo RESULT =null;
		int pfunleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int pfunright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo pfun = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int mexpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int mexpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo mexp = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo met = new Nodo("PUBLICOS");
        met.agregarHijo(pfun);
        met.agregarHijo(mexp);
        RESULT=met;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MET_EXP",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MET_EXP ::= METODOS PRIVADO DOSPUNTOS FINLINEA PRODFUNCION MET_EXP 
            {
              Nodo RESULT =null;
		int pfunleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int pfunright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo pfun = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int mexpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int mexpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo mexp = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo met = new Nodo("PRIVADOS");
        met.agregarHijo(pfun);
        met.agregarHijo(mexp);
        RESULT=met;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MET_EXP",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MET_EXP ::= METODOS PROTEGIDO DOSPUNTOS FINLINEA PRODFUNCION MET_EXP 
            {
              Nodo RESULT =null;
		int pfunleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int pfunright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo pfun = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int mexpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int mexpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo mexp = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo met = new Nodo("PROTEGIDOS");
        met.agregarHijo(pfun);
        met.agregarHijo(mexp);
        RESULT=met;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MET_EXP",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MET_EXP ::= METODOS PUBLICO DOSPUNTOS FINLINEA PRODFUNCION 
            {
              Nodo RESULT =null;
		int pfunleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pfunright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo pfun = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo met = new Nodo("PUBLICOS");
        met.agregarHijo(pfun);
        RESULT=met;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MET_EXP",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MET_EXP ::= METODOS PRIVADO DOSPUNTOS FINLINEA PRODFUNCION 
            {
              Nodo RESULT =null;
		int pfunleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pfunright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo pfun = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo met = new Nodo("PRIVADOS");
        met.agregarHijo(pfun);
        RESULT=met;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MET_EXP",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MET_EXP ::= METODOS PROTEGIDO DOSPUNTOS FINLINEA PRODFUNCION 
            {
              Nodo RESULT =null;
		int pfunleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pfunright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo pfun = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo met = new Nodo("PROTEGIDOS");
        met.agregarHijo(pfun);
        RESULT=met;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MET_EXP",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PRODFUNCION ::= CONSTRUCTOR ARGUMENTOS FINLINEA CODIGO PRODFUNCION 
            {
              Nodo RESULT =null;
		int arguleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int arguright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Nodo argu = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo cd = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pfunleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pfunright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo pfun = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo prfun = new Nodo("CONSTRUCTOR");
        Nodo arg = new Nodo("PARAMETROS");
        arg.agregarHijo(argu);
        Nodo proce = new Nodo("PROCESOS");
        proce.agregarHijo(cd);
        if(argu!=null)
            prfun.agregarHijo(arg);
        prfun.agregarHijo(cd);
        prfun.agregarHijo(pfun);
        RESULT=prfun;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PRODFUNCION",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PRODFUNCION ::= DESTRUCTOR ARGUMENTOS FINLINEA CODIGO PRODFUNCION 
            {
              Nodo RESULT =null;
		int arguleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int arguright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Nodo argu = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo cd = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pfunleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pfunright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo pfun = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo prfun = new Nodo("DESTRUCTOR");
        Nodo arg = new Nodo("PARAMETROS");
        arg.agregarHijo(argu);
        Nodo proce = new Nodo("PROCESOS");
        proce.agregarHijo(cd);
        if(argu!=null)
            prfun.agregarHijo(arg);
        prfun.agregarHijo(cd);
        prfun.agregarHijo(pfun);
        RESULT=prfun;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PRODFUNCION",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PRODFUNCION ::= TIPODATO ID ARGUMENTOS FINLINEA CODIGO PRODFUNCION 
            {
              Nodo RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		token ident = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int arguleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int arguright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Nodo argu = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo cd = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pfunleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pfunright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo pfun = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo prfun = new Nodo(ident.getCadena());
        Nodo arg = new Nodo("PARAMETROS");
        arg.agregarHijo(argu);
        Nodo proce = new Nodo("PROCESOS");
        proce.agregarHijo(cd);
        if(argu!=null)
            prfun.agregarHijo(arg);
        prfun.agregarHijo(cd);
        prfun.agregarHijo(pfun);
        RESULT=prfun;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PRODFUNCION",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PRODFUNCION ::= NULO ID ARGUMENTOS FINLINEA CODIGO PRODFUNCION 
            {
              Nodo RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		token ident = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int arguleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int arguright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Nodo argu = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Nodo cd = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pfunleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pfunright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo pfun = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo prfun = new Nodo(ident.getCadena());
        Nodo arg = new Nodo("PARAMETROS");
        arg.agregarHijo(argu);
        Nodo proce = new Nodo("PROCESOS");
        proce.agregarHijo(cd);
        if(argu!=null)
            prfun.agregarHijo(arg);
        prfun.agregarHijo(cd);
        prfun.agregarHijo(pfun);
        RESULT=prfun;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PRODFUNCION",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PRODFUNCION ::= CONSTRUCTOR ARGUMENTOS FINLINEA CODIGO 
            {
              Nodo RESULT =null;
		int arguleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int arguright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Nodo argu = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo cd = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo prfun = new Nodo("CONSTRUCTOR");
        Nodo arg = new Nodo("PARAMETROS");
        arg.agregarHijo(argu);
        Nodo proce = new Nodo("PROCESOS");
        proce.agregarHijo(cd);
        if(argu!=null)
            prfun.agregarHijo(arg);
        prfun.agregarHijo(cd);
        RESULT=prfun;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PRODFUNCION",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PRODFUNCION ::= DESTRUCTOR ARGUMENTOS FINLINEA CODIGO 
            {
              Nodo RESULT =null;
		int arguleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int arguright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Nodo argu = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo cd = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo prfun = new Nodo("DESTRUCTOR");
        Nodo arg = new Nodo("PARAMETROS");
        arg.agregarHijo(argu);
        Nodo proce = new Nodo("PROCESOS");
        proce.agregarHijo(cd);
        if(argu!=null)
            prfun.agregarHijo(arg);
        prfun.agregarHijo(cd);
        RESULT=prfun;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PRODFUNCION",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PRODFUNCION ::= TIPODATO ID ARGUMENTOS FINLINEA CODIGO 
            {
              Nodo RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		token ident = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int arguleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int arguright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Nodo argu = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo cd = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo prfun = new Nodo(ident.getCadena());
        Nodo arg = new Nodo("PARAMETROS");
        arg.agregarHijo(argu);
        Nodo proce = new Nodo("PROCESOS");
        proce.agregarHijo(cd);
        if(argu!=null)
            prfun.agregarHijo(arg);
        prfun.agregarHijo(cd);
        RESULT=prfun;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PRODFUNCION",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PRODFUNCION ::= NULO ID ARGUMENTOS FINLINEA CODIGO 
            {
              Nodo RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		token ident = (token)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int arguleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int arguright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Nodo argu = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Nodo cd = (Nodo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo prfun = new Nodo(ident.getCadena());
        Nodo arg = new Nodo("PARAMETROS");
        arg.agregarHijo(argu);
        Nodo proce = new Nodo("PROCESOS");
        proce.agregarHijo(cd);
        if(argu!=null)
            prfun.agregarHijo(arg);
        prfun.agregarHijo(cd);
        RESULT=prfun;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PRODFUNCION",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CODIGO ::= 
            {
              Nodo RESULT =null;
		RESULT=new Nodo("CODIGO");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
